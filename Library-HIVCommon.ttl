@prefix fhir: <http://hl7.org/fhir/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# - resource -------------------------------------------------------------------

<http://smart.who.int/hiv/Library/HIVCommon> a fhir:Library ;
  fhir:nodeRole fhir:treeRoot ;
  fhir:id [ fhir:v "HIVCommon"] ; # 
  fhir:meta [
     fhir:profile ( [
       fhir:v "http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-shareablelibrary"^^xsd:anyURI ;
       fhir:link <http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-shareablelibrary>
     ] [
       fhir:v "http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-publishablelibrary"^^xsd:anyURI ;
       fhir:link <http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-publishablelibrary>
     ] [
       fhir:v "http://hl7.org/fhir/uv/cql/StructureDefinition/cql-library"^^xsd:anyURI ;
       fhir:link <http://hl7.org/fhir/uv/cql/StructureDefinition/cql-library>
     ] [
       fhir:v "http://hl7.org/fhir/uv/cql/StructureDefinition/cql-module"^^xsd:anyURI ;
       fhir:link <http://hl7.org/fhir/uv/cql/StructureDefinition/cql-module>
     ] )
  ] ; # 
  fhir:text [
     fhir:status [ fhir:v "extensions" ] ;
     fhir:div "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n<div>\n    <table class=\"grid dict\">\n        \n        \n        <tr>\n            <th scope=\"row\"><b>Title: </b></th>\n            <td style=\"padding-left: 4px;\">HIVCommon</td>\n        </tr>\n        \n\n        \n        \n        <tr>\n            <th scope=\"row\"><b>Id: </b></th>\n            <td style=\"padding-left: 4px;\">HIVCommon</td>\n        </tr>\n        \n\n        \n        \n        <tr>\n            <th scope=\"row\"><b>Version: </b></th>\n            <td style=\"padding-left: 4px;\">0.4.3</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Url: </b></th>\n            <td style=\"padding-left: 4px;\"><a href=\"Library-HIVCommon.html\">HIVCommon</a></td>\n        </tr>\n        \n\n        \n\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Status: </b></th>\n            <td style=\"padding-left: 4px;\">draft</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Experimental: </b></th>\n            <td style=\"padding-left: 4px;\">true</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Type: </b></th>\n            <td style=\"padding-left: 4px;\">\n                \n                    \n                        \n                        <p style=\"margin-bottom: 5px;\">\n                            <b>system: </b> <span><a href=\"http://terminology.hl7.org/6.0.2/CodeSystem-library-type.html\">http://terminology.hl7.org/CodeSystem/library-type</a></span>\n                        </p>\n                        \n                        \n                        <p style=\"margin-bottom: 5px;\">\n                            <b>code: </b> <span>logic-library</span>\n                        </p>\n                        \n                        \n                    \n                \n                \n            </td>\n        </tr>\n        \n\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Date: </b></th>\n            <td style=\"padding-left: 4px;\">2025-02-07 14:15:45+0000</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Publisher: </b></th>\n            <td style=\"padding-left: 4px;\">WHO</td>\n        </tr>\n        \n\n        \n        <tr>\n            <th scope=\"row\"><b>Description: </b></th>\n            <td style=\"padding-left: 4px;\"><div><p>Description not yet available for HIVCommon.</p>\n</div></td>\n        </tr>\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n        \n        <tr>\n          <td colspan=\"2\">\n            <table>\n              <tr><th><a id=\"cql-content\"><b>Content: </b></a> text/cql</th></tr>\n              <tr><td><pre><code class=\"language-cql\">library HIVCommon version '0.0.1' \n\nusing FHIR version '4.0.1'\n\ninclude FHIRHelpers version '4.0.1'\ninclude WHOCommon called WCom\n\ninclude HIVConcepts called Concepts\ninclude HIVConceptsCustom called CustomConcepts\n\ncontext Patient\n\n//VERIFIED\n\n\n//DRAFT\n\n//need to add Time to start ART (within 7, 30 or 90 days of diagnosis, as per country guidelines)\n//need to add Disaggregation by time since diagnosis\n  \n\n\n/* \n* DAK has codes for HAART misspecified \n* ICD-10 Z92.2	Other prophylactic chemotherapy		\n* LOINC &quot;54825-5	&quot;	On scheduled pain medication regimen in last 7 days\n*\n* Should discuss \n*/\n\n\n\n\n\n\n\n/*\n* Kenya EMR defined as HIV positive condition\n* Will need to discuss if produce flags through conditions for concepts to use in indicator calculation such as HIV positive and On ART\n* However, we have moved forward with a more prescriptive approach \n* Inevitably our approach requires that certain data elements be available\n*/\n\n/*\n * HIV Treatment during the measurement period\n * uses dosage and dispensation amount to estimate last day of medication\n * medication should be dispensed before end of measurement period\n * medication should last until after 28 days after the end of the measurement period\n * This takes into account lost to follow up\n */\n\n/*\n*define &quot;HIV Treatment during the measurement period&quot;:\n*   [MedicationDispense] MD\n*    where MD.status in { 'final', 'amended', 'corrected' }\n*    and MD.medication ~ 'Antiretroviral'\n*    and MD.whenHandedOver before end of &quot;Measurement Period&quot;\n*    and (MD.whenHandedOver + MD.dosageInstruction[0].timing.repeat.duration.value * MedicationDispense.quantity.value) after (measurementPeriod.end - 28 days)\n*/ \n\n/*\n* Immunization defines HAART as\n*  exists([MedicationAdministration] A where ExtractMedicationCode(A.medication) in IMMZc.&quot;ARV Drugs&quot; and A.status = 'in-progress')\n* I believe this is the incorrect resource unless they mean to say that medication is given during a medical encounter\n* would like to discuss \n*/ \n\n/** \n * Patient Deceased During Measurement Period\n * Immunization defines this as true when is a boolean. This may have the effect of deleting a person from indicators in all calculations\n * Should intend to use when patient.deceased FHIR boolean was updated to TRUE if no other date is available\n * Kenya EMR example does not account for when deceased is just a boolean\n */\n\n\n/*\ndefine &quot;PREP Prescription Days&quot;:\n  Sum(\n    (\n      collapse (\n        [MedicationRequest] MR\n          where MR.status = 'completed'\n          and MR.intent = 'order'\n          and MR.medication ~ Concepts.&quot;PrEP for HIV prevention&quot;\n        return WComV2.&quot;Prescription Relevant Period&quot;( MR ) intersect &quot;Measurement Period&quot;\n      )\n    ) PREPUseInterval\n      return days between start of PREPUseInterval and end of PREPUseInterval\n  )\n*/\n\n\ndefine function GetDurationInDays(value FHIR.Duration): // returns Decimal:\n    case value.code.value\n      when 'a' then value.value * 365.0\n      when 'mo' then value.value.value * 30.0\n      when 'wk' then value.value.value * 7.0\n      when 'd' then value.value.value\n      when 'h' then value.value.value / 24.0\n      when 'min' then value.value.value / 60.0 / 24.0\n      when 's' then value.value.value / 60.0 / 60.0 / 24.0\n      when 'ms' then value.value.value / 60.0 / 60.0 / 24.0 / 1000.0\n      else Message(1000, true, 'Undefined', 'Error', 'Unsupported duration unit ' + value.code.value)\n    end\n\ndefine function &quot;Prescription Relevant Period&quot;(prescription FHIR.MedicationRequest):\n  if (\n    prescription.authoredOn is not null and prescription.dispenseRequest is not null\n      and prescription.dispenseRequest.expectedSupplyDuration is not null\n  )\n  then Interval[\n    date from prescription.authoredOn,\n    date from prescription.authoredOn + System.Quantity{ value: GetDurationInDays(prescription.dispenseRequest.expectedSupplyDuration), unit: 'days' }\n  ]\n  else null\n\n//System.Integer\ndefine function ToDaily(frequency System.Integer, period System.Quantity):\n  case period.unit\n    when 'h' then frequency * (24.0 / period.value)\n    when 'min' then frequency * (24.0 / period.value) * 60\n    when 's' then frequency * (24.0 / period.value) * 60 * 60\n    when 'd' then frequency * (24.0 / period.value) / 24\n    when 'wk' then frequency * (24.0 / period.value) / (24 * 7)\n    when 'mo' then frequency * (24.0 / period.value) / (24 * 30) /* assuming 30 days in month */\n    when 'a' then frequency * (24.0 / period.value) / (24 * 365) /* assuming 365 days in year */\n    when 'hour' then frequency * (24.0 / period.value)\n    when 'minute' then frequency * (24.0 / period.value) * 60\n    when 'second' then frequency * (24.0 / period.value) * 60 * 60\n    when 'day' then frequency * (24.0 / period.value) / 24\n    when 'week' then frequency * (24.0 / period.value) / (24 * 7)\n    when 'month' then frequency * (24.0 / period.value) / (24 * 30) /* assuming 30 days in month */\n    when 'year' then frequency * (24.0 / period.value) / (24 * 365) /* assuming 365 days in year */\n    when 'hours' then frequency * (24.0 / period.value)\n    when 'minutes' then frequency * (24.0 / period.value) * 60\n    when 'seconds' then frequency * (24.0 / period.value) * 60 * 60\n    when 'days' then frequency * (24.0 / period.value) / 24\n    when 'weeks' then frequency * (24.0 / period.value) / (24 * 7)\n    when 'months' then frequency * (24.0 / period.value) / (24 * 30) /* assuming 30 days in month */\n    when 'years' then frequency * (24.0 / period.value) / (24 * 365) /* assuming 365 days in year */\n    else null\n  end\n\n  define function &quot;HasEnd&quot;(period Interval&lt;DateTime&gt; ):\n  not (end of period is null\n    or end of period = maximum DateTime\n)\n\n  define fluent function MedicationRequestPeriod(Request MedicationRequest):\n  Request R\n    let\n      dosage: singleton from R.dosageInstruction,\n      doseAndRate: singleton from dosage.doseAndRate,\n      doseRange: doseAndRate.dose as Range,\n      doseQuantity: doseAndRate.dose as SimpleQuantity,\n      dose: Coalesce(end of doseRange, doseQuantity),\n      timing: dosage.timing,\n      frequency: Coalesce(timing.repeat.frequencyMax, timing.repeat.frequency),\n      period: System.Quantity { value: timing.repeat.period, unit: timing.repeat.periodUnit.value },\n      dosesPerDay: Coalesce(ToDaily(FHIRHelpers.ToInteger(frequency), period), Count(timing.repeat.timeOfDay), 1.0),\n      boundsPeriod: timing.repeat.bounds as Period,\n      daysSupply: R.dispenseRequest.expectedSupplyDuration,\n      quantity: R.dispenseRequest.quantity,\n      refills: Coalesce(R.dispenseRequest.numberOfRepeatsAllowed, 0),\n      startDate:\n        Coalesce(\n          start of boundsPeriod,\n          start of R.dispenseRequest.validityPeriod,\n          R.authoredOn\n        )\n    return\n      if HasEnd(boundsPeriod) then\n        Interval[startDate, end of boundsPeriod]\n      else\n        (\n          Coalesce(daysSupply, quantity / (dose * dosesPerDay))\n            * (1 + refills)\n        ) durationInDays\n          return Interval[startDate, startDate + durationInDays]\n\n\ndefine function &quot;DosesPerDay&quot;(frequency Code):\n	/*Calculates the cumulative dose per day for each prescription*/\n	case\n		when frequency ~ CustomConcepts.&quot;Once daily (qualifier value)&quot; then 1.0\n		when frequency ~ CustomConcepts.&quot;Twice a day (qualifier value)&quot; then 2.0\n		when frequency ~ CustomConcepts.&quot;Three times daily (qualifier value)&quot; then 3.0\n		when frequency ~ CustomConcepts.&quot;Four times daily (qualifier value)&quot; then 4.0\n		when frequency ~ CustomConcepts.&quot;Every twenty four hours (qualifier value)&quot; then 1.0\n		when frequency ~ CustomConcepts.&quot;Every twelve hours (qualifier value)&quot; then 2.0\n		when frequency ~ CustomConcepts.&quot;Every thirty six hours (qualifier value)&quot; then 0.67\n		when frequency ~ CustomConcepts.&quot;Every eight hours (qualifier value)&quot; then 3.0\n		when frequency ~ CustomConcepts.&quot;Every four hours (qualifier value)&quot; then 6.0\n		when frequency ~ CustomConcepts.&quot;Every six hours (qualifier value)&quot; then 4.0\n		when frequency ~ CustomConcepts.&quot;Every seventy two hours (qualifier value)&quot; then 0.34\n		when frequency ~ CustomConcepts.&quot;Every forty eight hours (qualifier value)&quot; then 0.5\n		when frequency ~ CustomConcepts.&quot;Every eight to twelve hours (qualifier value)&quot; then 2.0\n		when frequency ~ CustomConcepts.&quot;Every six to eight hours (qualifier value)&quot; then 3.0\n		when frequency ~ CustomConcepts.&quot;Every three to four hours (qualifier value)&quot; then 6.0\n		when frequency ~ CustomConcepts.&quot;Every three to six hours (qualifier value)&quot; then 4.0\n		when frequency ~ CustomConcepts.&quot;Every two to four hours (qualifier value)&quot; then 6.0\n		when frequency ~ CustomConcepts.&quot;One to four times a day (qualifier value)&quot; then 4.0\n		when frequency ~ CustomConcepts.&quot;One to three times a day (qualifier value)&quot; then 3.0\n		when frequency ~ CustomConcepts.&quot;One to two times a day (qualifier value)&quot; then 2.0\n		else null \n	end\n\n  //define function &quot;GetMedicationDailyDose&quot;(dosage Quantity, dosesPerDay Decimal):\n  //dosage * Quantity { value: dosesPerDay, unit: '/d' }\n\n\ndefine fluent function dailyDose(Request &quot;MedicationRequest&quot;):\n  Request R\n    let\n      dosage: singleton from R.dosageInstruction,\n      doseAndRate: singleton from dosage.doseAndRate,\n      timing: dosage.timing,\n      frequency: Coalesce(timing.repeat.frequencyMax, timing.repeat.frequency),\n      period: System.Quantity { value: timing.repeat.period, unit: timing.repeat.periodUnit.value },\n      doseRange: doseAndRate.dose as Range,\n      doseQuantity: doseAndRate.dose as SimpleQuantity,\n      dose: Coalesce(doseRange.high, doseQuantity),\n      dosesPerDay: Coalesce(ToDaily(frequency, period), Count(timing.repeat.timeOfDay), 1.0),\n      quantity: R.dispenseRequest.quantity\n    return\n      quantity / (dose * dosesPerDay)\n\ndefine fluent function dailyDose(Dispense &quot;MedicationDispense&quot;):\n  Dispense D\n    let\n      dosage: singleton from D.dosageInstruction,\n      doseAndRate: singleton from dosage.doseAndRate,\n      timing: dosage.timing,\n      frequency: Coalesce(timing.repeat.frequencyMax, timing.repeat.frequency),\n      period: System.Quantity { value: timing.repeat.period, unit: timing.repeat.periodUnit.value },\n      doseRange: doseAndRate.dose as Range,\n      doseQuantity: doseAndRate.dose as SimpleQuantity,\n      dose: Coalesce(doseRange.high, doseQuantity),\n      dosesPerDay: Coalesce(ToDaily(frequency, period), Count(timing.repeat.timeOfDay), 1.0)\n    return\n      D.quantity / (dose * dosesPerDay)\n\n\n\n\n\n\n\n  \n  \n\n\n//need to define\n  define STI_testing:\n    [Procedure] P\n  where P.status = 'completed'\n  and P.code ~ Concepts.&quot;STI testing and treatment services&quot; \n\n\n/**\n * @description Takes a choice between a Medication and a CodeableConcept and returns just the code of the medication\n */\ndefine function ExtractMedicationCode(choice Choice&lt;FHIR.CodeableConcept, FHIR.Reference&gt;):\n  case\n	  when choice is FHIR.CodeableConcept then\n    	choice as FHIR.CodeableConcept\n    when choice is FHIR.Reference then\n      First([Medication] M \n        where M.id = Last(Split(choice.reference, '/'))\n        return M.code as FHIR.CodeableConcept)\n    else\n      Message(null as FHIR.CodeableConcept, true, '1', 'Error', 'Cannot compute a medication code') // TODO: I'm sure that this is supported somehow?\n  end\n\n/**\n * @description Returns the code of an Observation CodeableConcept\n */\ndefine fluent function getObservationCode(observation FHIR.Observation):\n  case \n    when observation.code is FHIR.CodeableConcept then (observation.value as CodeableConcept).coding.code\n    else null\n  end\n  \n/**\n * @description Returns a list of codes of an a list of Observations\n */\ndefine fluent function getObservationCodes(obslist List&lt;FHIR.Observation&gt;):\n  obslist obs return obs.getObservationCode()\n\n\n</code></pre></td></tr>\n            </table>\n          </td>\n        </tr>\n        \n        \n        \n    </table>\n</div>\n</div>"
  ] ; # 
  fhir:extension ( [
     fhir:url [ fhir:v "http://hl7.org/fhir/StructureDefinition/cqf-knowledgeCapability"^^xsd:anyURI ] ;
     fhir:value [ fhir:v "computable" ]
  ] ) ; # 
  fhir:url [ fhir:v "http://smart.who.int/hiv/Library/HIVCommon"^^xsd:anyURI] ; # 
  fhir:version [ fhir:v "0.4.3"] ; # 
  fhir:name [ fhir:v "HIVCommon"] ; # 
  fhir:title [ fhir:v "HIVCommon"] ; # 
  fhir:status [ fhir:v "draft"] ; # 
  fhir:experimental [ fhir:v "true"^^xsd:boolean] ; # 
  fhir:type [
     fhir:coding ( [
       fhir:system [ fhir:v "http://terminology.hl7.org/CodeSystem/library-type"^^xsd:anyURI ] ;
       fhir:code [ fhir:v "logic-library" ]
     ] )
  ] ; # 
  fhir:date [ fhir:v "2025-02-07T14:15:45+00:00"^^xsd:dateTime] ; # 
  fhir:publisher [ fhir:v "WHO"] ; # 
  fhir:contact ( [
     fhir:name [ fhir:v "WHO" ] ;
     fhir:telecom ( [
       fhir:system [ fhir:v "url" ] ;
       fhir:value [ fhir:v "http://who.int" ]
     ] )
  ] ) ; # 
  fhir:description [ fhir:v "Description not yet available for HIVCommon."] ; # 
  fhir:content ( [
     fhir:contentType [ fhir:v "text/cql" ] ;
     fhir:data [ fhir:v ""^^xsd:base64Binary ]
  ] ) . # 

# -------------------------------------------------------------------------------------

