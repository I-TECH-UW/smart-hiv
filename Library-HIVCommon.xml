<?xml version="1.0" encoding="UTF-8"?>

<Library xmlns="http://hl7.org/fhir">
  <id value="HIVCommon"/>
  <meta>
    <profile value="http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-shareablelibrary"/>
    <profile value="http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-publishablelibrary"/>
    <profile value="http://hl7.org/fhir/uv/cql/StructureDefinition/cql-library"/>
    <profile value="http://hl7.org/fhir/uv/cql/StructureDefinition/cql-module"/>
  </meta>
  <text>
    <status value="generated"/><div xmlns="http://www.w3.org/1999/xhtml"><p class="res-header-id"><b>Generated Narrative: Library HIVCommon</b></p><a name="HIVCommon"> </a><a name="hcHIVCommon"> </a><a name="HIVCommon-en-US"> </a><h2>Contents</h2><p><code>text/cql</code></p><pre><code>library HIVCommon version '0.0.1' 

using FHIR version '4.0.1'

include FHIRHelpers version '4.0.1'
include WHOCommon called WCom
//include FHIRCommon called FC
include HIVConcepts called HC
include HIVConceptsCustom called HCC

parameter &quot;Measurement Period&quot; Interval&lt;Date&gt; default Interval[@2020-01-01, @2020-12-31]
parameter &quot;Measurement Date&quot; Date default @2020-01-01
parameter &quot;Testing Interval&quot; System.Quantity default 3 months
parameter &quot;Intervention Interval&quot; System.Quantity default 7 days

context Patient

/*
 * HIV Positive during the measurement period
 * Does issued imply that results returned to tester
 * or should use communication or encounter resource to specify?
 */



define &quot;HIV Positive Condition&quot;:
[Condition] C
    where C.clinicalStatus ~ HCC.&quot;active&quot;
    and exists(C.category CC where CC ~ HCC.&quot;encounter-diagnosis&quot;)
    and C.code ~ HC.&quot;HIV-positive - HIV.B.DE116&quot;

define &quot;HIV Positive Observation&quot;:
[Observation] O
    where O.status in {'final', 'amended'}
    and O.code ~ HC.&quot;HIV status&quot;
    and O.value ~ HC.&quot;HIV-positive - HIV.B.DE116&quot;

define &quot;HIV Positive Observation - HIV Self Test&quot;:
[Observation] O
    where O.status in {'final', 'amended'}
    and O.code ~ HC.&quot;HIV self-test&quot;
    and O.value ~ HC.&quot;HIV-positive - HIV.B.DE116&quot;

define &quot;HIV Negative Observation&quot;:
[Observation] O
    where O.status in {'final', 'amended'}
    and O.code ~ HC.&quot;Rapid diagnostic test for HIV - HIV.B.DE82&quot;
    and O.value ~ HC.&quot;HIV-negative - HIV.B.DE117&quot;

define &quot;HIV test resulted&quot;:
  [Observation] O
    where O.status in {'final', 'amended'}
    and O.code ~ HC.&quot;Rapid diagnostic test for HIV - HIV.B.DE82&quot;

define &quot;HIV Treatment Active&quot;:
[MedicationStatement] MS
Sort by MS.effective
    where MS.status = 'completed'
    and exists(MS.reasonCode C where C ~ HC.&quot;On ART - HIV.H.DE47&quot;)
    


define &quot;HIV PREP Active&quot;:
[MedicationStatement] MS
    where MS.status = 'completed'
    and exists(MS.reasonCode C where C ~ HC.&quot;PrEP for HIV prevention&quot;)

 define &quot;Client is at elevated risk for HIV acquisition&quot;:
    [Observation] O
    where O.status in { 'final', 'amended', 'corrected' }
    and exists(O.category OC where OC ~ HCC.&quot;social-history&quot;)
    and O.code ~ HC.&quot;At elevated risk for HIV acquisition - HIV.B.DE225&quot;

define &quot;PREP Prescription&quot;:
    [MedicationRequest] MR
        where MR.status = 'completed'
        and MR.intent = 'order'
        and MR.medication ~ HC.&quot;PrEP for HIV prevention&quot;

define &quot;PEP Prescription&quot;:
    [MedicationRequest] MR
        where MR.status = 'completed'
        and MR.intent = 'order'
        and MR.medication ~ HC.&quot;PEP for HIV prevention&quot;

define &quot;PEP Prescribed before start of Measurement Period and Completed&quot;:
  [MedicationStatement] MS
    with [MedicationRequest] MR
      such that MS.basedOn.references(MR) and MR.status = 'completed'
        and MR.intent = 'order'
        and MR.medication ~ HC.&quot;PEP for HIV prevention&quot;
        and MR.authoredOn before end of &quot;Measurement Period&quot;
  where (MS.status = 'completed'
  and exists(MS.reasonCode C where C ~ HC.&quot;PrEP for HIV prevention&quot;)
  )

define &quot;PEP Prescribed during Measurement Period and Completed&quot;:
  [MedicationStatement] MS
    with [MedicationRequest] MR
      such that MS.basedOn.references(MR) and MR.status = 'completed'
        and MR.intent = 'order'
        and MR.medication ~ HC.&quot;PEP for HIV prevention&quot;
        and MR.authoredOn after start of &quot;Measurement Period&quot;
        and MR.authoredOn before end of &quot;Measurement Period&quot;
  where (MS.status = 'completed'
  and exists(MS.reasonCode C where C ~ HC.&quot;PrEP for HIV prevention&quot;)
  )

define &quot;HIV Test Positive After PEP Prescribed during Measurement Period&quot;:
  [Observation: HC.&quot;HIV test result - HIV.B.DE111&quot;] O
    with [MedicationRequest] MR
      such that O.basedOn.references(MR) and MR.status = 'completed'
        and MR.intent = 'order'
        and MR.medication ~ HC.&quot;PEP for HIV prevention&quot;
        and MR.authoredOn after start of &quot;Measurement Period&quot;
        and MR.authoredOn before end of &quot;Measurement Period&quot;
        and O.issued before (MR.authoredOn + 3 months)
  where ( O.status in {'final', 'amended'}
    and O.value ~ HC.&quot;HIV-positive - HIV.B.DE112&quot;
  )

define &quot;Needle Syringe Dispensed&quot;:  
  [DeviceUseStatement] DUS
  with [Observation: HC.&quot;Key population member* - HIV.E.DE113&quot;] O
      such that DUS.reasonReference.references(O) 
        and O.status in { 'final', 'amended', 'corrected' }
        and exists(O.category OC where OC ~ HCC.&quot;social-history&quot;)
        and O.value ~ HC.&quot;People who inject drugs - HIV.B.DE54&quot;
  where DUS.status = 'completed'

define PWID_person:
  [Observation: HC.&quot;Key population member* - HIV.E.DE113&quot;] O
  where O.status in { 'final', 'amended', 'corrected' }
    and exists(O.category OC where OC ~ HCC.&quot;social-history&quot;)
    and O.value ~ HC.&quot;People who inject drugs - HIV.B.DE54&quot;

define &quot;OAMT_initiated&quot;:
exists(
    [EpisodeOfCare] EOC
    where exists(EOC.type T where T ~ HC.&quot;OAMT&quot;)
    and (exists (
      EOC.statusHistory H
      where H.period starts after start of &quot;Measurement Period&quot;
      and H.period starts before end of &quot;Measurement Period&quot;
    ) 
    or (
      EOC.period starts after start of &quot;Measurement Period&quot;
      and EOC.period starts before end of &quot;Measurement Period&quot;
    )
    )
    )

define &quot;OAMT_retained&quot;:
exists(
    [EpisodeOfCare] EOC
    where exists(EOC.type T where T ~ HC.&quot;OAMT&quot;)
    and (exists (
      EOC.statusHistory H
      where H.period starts after start of &quot;Measurement Period&quot;
      and H.period starts before end of &quot;Measurement Period&quot;
      and H.period ends after (end of &quot;Measurement Period&quot; + 6 months)
    ) 
    or (
      EOC.period starts after start of &quot;Measurement Period&quot;
      and EOC.period starts before end of &quot;Measurement Period&quot;
      and (EOC.period ends after (end of &quot;Measurement Period&quot; + 6 months)
      or end of EOC.period is null)
    )
    )
    )

define &quot;methadone_prescribed&quot;:
[MedicationRequest] MR
        where MR.status = 'completed'
        and MR.intent = 'order'
        and MR.medication ~ HCC.&quot;methadone&quot;

define &quot;buprenorphine_prescribed&quot;:
[MedicationRequest] MR
        where MR.status = 'completed'
        and MR.intent = 'order'
        and MR.medication ~ HCC.&quot;buprenorphine&quot;
  
define &quot;Patient Deceased before end of Measurement Period&quot;:
  case 
    when Patient.deceased is FHIR.boolean and Patient.deceased ~ true then (Patient.meta.lastUpdated before end of &quot;Measurement Period&quot;)
    when Patient.deceased is FHIR.dateTime then Patient.deceased as FHIR.dateTime before end of &quot;Measurement Period&quot;
    else false
  end

define &quot;Patient Deceased during Measurement Period&quot;:
  case 
    when Patient.deceased is FHIR.boolean and Patient.deceased ~ true then Patient.meta.lastUpdated before end of  &quot;Measurement Period&quot; and  Patient.meta.lastUpdated after start of &quot;Measurement Period&quot;
    when Patient.deceased is FHIR.dateTime then Patient.deceased as FHIR.dateTime before end of  &quot;Measurement Period&quot; and Patient.deceased as FHIR.dateTime after start of &quot;Measurement Period&quot;
    else false
  end

/* End of care because of transferring out*/

define &quot;Transfer Out at Facility during the measurement period&quot;:
    exists(
    [EpisodeOfCare] EOC
    where exists(EOC.type T where T ~ HC.&quot;On ART - HIV.H.DE47&quot;) 
    and (exists (
      EOC.statusHistory H
      where H.status = 'finished'
      and H.period ends during &quot;Measurement Period&quot;
    ) 
    or (
      EOC.status = 'finished'
      and EOC.period ends during &quot;Measurement Period&quot;
    )
    )
    )

define &quot;Lost to Follow Up during the measurement period&quot;:
    exists(&quot;HIV Treatment Active&quot; H
   where H.effective starts before end of &quot;Measurement Period&quot;
    and H.effective ends after start of &quot;Measurement Period&quot;
	and not (H.effective ends after (end of &quot;Measurement Period&quot; - 28 days))
   )

/*
 * By Age Stratifiers
 * (0–4, 5–9, 10–14, 15–19, 20–24, 25–29, 30–34, 35–39, 40–44, 45–49, 50+ years)
 * 
 */
define &quot;By Age Stratifier&quot;:
    case 
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 4 then '0-4'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 9 then '5-9'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 14 then '10–14'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 19 then '15–19'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 24 then '20–24'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 29 then '25–29'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 34 then '30–34'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 39 then '35–39'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 44 then '40–44'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 49 then '45–49'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &gt;= 50 then '50+'
        else null
    end
  
  /*
 * By Age Stratifiers
 * Age (0–4, 5–9, 10–14, 15–19, 20–24, 25–49, 50+ years)
 * 
 */
define &quot;By Age Stratifier 2&quot;:
    case 
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 4 then '0-4'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 9 then '5-9'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 14 then '10–14'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 19 then '15–19'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 24 then '20–24'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 49 then '25–49'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &gt;= 50 then '50+'
        else null
    end

define &quot;By Age Stratifier 3&quot;:
    case 
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &gt;= 15 and AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 19 then '15-19'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 24 then '20-24'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &lt;= 49 then '25–49'
        when AgeInYearsAt(start of &quot;Measurement Period&quot;) &gt;= 50 then '50+'
        else null
    end

/*
 * By state stratifier
 */

define &quot;By Geographic Region Stratifier&quot;:
    First(Patient.address A where A.use in { 'home' }).state

/*
 * By Administrative Gender of Patient Stratifier
 * Need to expand codes
 */

define &quot;By Administrative Gender Stratifier&quot;:
    case 
        when Patient.gender = 'male' then HC.&quot;Male&quot;
        when Patient.gender = 'female' then HC.&quot;Female&quot;
        when Patient.gender = 'transgender female' then HC.&quot;Transgender female&quot;
        when Patient.gender = 'transgender male' then HC.&quot;Transgender male&quot;
        else HC.&quot;Other - HIV.A.DE23&quot;
    end

define &quot;HIV Status&quot;:
    case 
        when exists(&quot;HIV Positive Condition&quot; C where C.onset before end of &quot;Measurement Period&quot;) then HC.&quot;HIV-positive - HIV.B.DE116&quot;
        when not exists(&quot;HIV Positive Condition&quot; C where C.onset before end of &quot;Measurement Period&quot;) and exists(&quot;HIV Negative Observation&quot; O where O.issued before end of &quot;Measurement Period&quot;) then  HC.&quot;HIV-negative - HIV.B.DE117&quot;
        else HC.&quot;Unknown - HIV.B.DE118&quot;
    end

/*
 * Key populations (men who have sex with men, people living in prisons and other closed settings, people who inject drugs, sex workers, trans and gender diverse people)
 */

 define SW:
  exists (
    [Observation: HC.&quot;Key population member* - HIV.E.DE113&quot;] O
    where O.status in { 'final', 'amended', 'corrected' }
    and exists(O.category OC where OC ~ HCC.&quot;social-history&quot;)
    and O.value ~ HC.&quot;Sex worker - HIV.B.DE51&quot;
  )

 define MSM:
  exists (
    [Observation: HC.&quot;Key population member* - HIV.E.DE113&quot;] O
    where O.status in { 'final', 'amended', 'corrected' }
    and exists(O.category OC where OC ~ HCC.&quot;social-history&quot;)
    and O.value ~ HC.&quot;Men who have sex with men&quot;
  )

  define Trans:
  exists (
    [Observation: HC.&quot;Key population member* - HIV.E.DE113&quot;] O
    where O.status in { 'final', 'amended', 'corrected' }
    and exists(O.category OC where OC ~ HCC.&quot;social-history&quot;)
    and O.value ~ HC.&quot;Trans and gender-diverse people - HIV.B.DE53&quot;
  )

  define PWID:
  exists (
    [Observation: HC.&quot;Key population member* - HIV.E.DE113&quot;] O
    where O.status in { 'final', 'amended', 'corrected' }
    and exists(O.category OC where OC ~ HCC.&quot;social-history&quot;)
    and O.value ~ HC.&quot;People who inject drugs - HIV.B.DE54&quot;
  )

  define Prisoner:
  exists (
    [Observation: HC.&quot;Key population member* - HIV.E.DE113&quot;] O
    where O.status in { 'final', 'amended', 'corrected' }
    and exists(O.category OC where OC ~ HCC.&quot;social-history&quot;)
    and O.value ~ HC.&quot;People living in prisons and other closed settings&quot;
  )

  define TB_diagnosed:
  exists(
    ([Condition] C
    where C.clinicalStatus ~ HCC.&quot;active&quot;
    and exists(C.category CC where CC ~ HCC.&quot;encounter-diagnosis&quot;)
    and C.code ~ HC.&quot;Diagnosed TB&quot;
    and C.onset during &quot;Measurement Period&quot;)
  )
  
  define TB_presumptive:
  exists(
    ([Condition] C
    where C.clinicalStatus ~ HCC.&quot;active&quot;
    and exists(C.category CC where CC ~ HCC.&quot;encounter-diagnosis&quot;)
    and C.code ~ HC.&quot;Presumptive TB - HIV.D.DE945&quot;
    and C.onset during &quot;Measurement Period&quot;)
  )


define Exposure_Occupational:
  exists (
    [Observation: HC.&quot;HIV exposure type*&quot;] O
    where O.status in { 'final', 'amended', 'corrected' }
    and exists(O.category OC where OC ~ HCC.&quot;social-history&quot;)
    and O.value ~ HC.&quot;Occupational&quot;
  )

define Exposure_Non_Occupational_violent:
  exists (
    [Observation: HC.&quot;HIV exposure type*&quot;] O
    where O.status in { 'final', 'amended', 'corrected' }
    and exists(O.category OC where OC ~ HCC.&quot;social-history&quot;)
    and O.value ~ HC.&quot;Non-occupational violent&quot;
  )

define Exposure_Non_Occupational_consensual_sex:
  exists (
    [Observation: HC.&quot;HIV exposure type*&quot;] O
    where O.status in { 'final', 'amended', 'corrected' }
    and exists(O.category OC where OC ~ HCC.&quot;social-history&quot;)
    and O.value ~ HC.&quot;Non-occupational consensual sex&quot;
  )

define hiv_exposure_type:
  List&lt;String&gt;{
    if Exposure_Occupational then 'Occupational' else null,
    if Exposure_Non_Occupational_violent then 'Non-occupational violent' else null,
    if Exposure_Non_Occupational_consensual_sex then 'Non-occupational consensual sex' else null
  }

/*@triggeredBy Encounter with location = community level testing*/

define &quot;Community_testing&quot;:
  exists([Observation] O
    with [Encounter] E
      such that O.encounter.references(E) and exists(E.location.physicalType PT where PT ~  HC.&quot;Community-level testing&quot;) 
  where (O.status in { 'final', 'amended' }
  and O.code ~ HC.&quot;Rapid diagnostic test for HIV - HIV.B.DE82&quot;
  and O.issued during &quot;Measurement Period&quot;)
  )

/*@triggeredBy Encounter with location = facility level testing*/
define &quot;Facility_testing&quot;:
  exists([Observation] O
    with [Encounter] E
      such that O.encounter.references(E) and exists(E.location.physicalType PT where PT ~  HC.&quot;Facility-level testing&quot;)
  where (O.status in { 'final', 'amended' }
  and O.code ~ HC.&quot;Rapid diagnostic test for HIV - HIV.B.DE82&quot;
  and O.issued during &quot;Measurement Period&quot;)
  )

//lifted this from ANC DAK
define &quot;ANC_case&quot;:
exists(
    [EpisodeOfCare] EOC
    where exists(EOC.type T where T ~ HC.&quot;Already on ART at first antenatal care visit&quot;)
    and (exists (
      EOC.statusHistory H
      where H.period overlaps &quot;Measurement Period&quot;
    ) 
    or (
      EOC.period overlaps &quot;Measurement Period&quot;
    )
    )
    )
  

  define &quot;PREP Product Oral&quot;:
  exists([MedicationStatement] MS
    where MS.status = 'completed'
    and exists(MS.reasonCode C where C ~ HC.&quot;Currently on PrEP&quot;)
    and (MS.medication ~ HC.&quot;TDF + FTC - HIV.C.DE18&quot; or
    MS.medication ~ HC.&quot;TDF - HIV.C.DE19&quot; or
    MS.medication ~ HC.&quot;TDF + 3TC - HIV.C.DE20&quot; or
    MS.medication ~ HC.&quot;Other TDF-based regimen&quot;)
  )

  define &quot;PREP Product long-acting device&quot;:
  exists([MedicationStatement] MS
    where MS.status = 'completed'
    and exists(MS.reasonCode C where C ~ HC.&quot;Currently on PrEP&quot;)
    and MS.medication ~ HC.&quot;Dapivirine vaginal ring DVR - HIV.C.DE22&quot;
  )

  define &quot;PREP Product long-acting injectable&quot;:
  exists([MedicationStatement] MS
    where MS.status = 'completed'
    and exists(MS.reasonCode C where C ~ HC.&quot;Currently on PrEP&quot;)
    and MS.medication ~ HC.&quot;CAB-LA - HIV.C.DE23&quot;
  )
  
  define &quot;PREP first time&quot;:
  exists([MedicationStatement] MS
    where MS.status = 'completed'
    and exists(MS.reasonCode C where C ~ HC.&quot;Currently on PrEP&quot;)
    and exists(MS.statusReason SR where SR ~ HC.&quot;First-time user - HIV.C.DE25&quot;)
  )

  define &quot;PREP Continuing user&quot;:
  exists([MedicationStatement] MS
    where MS.status = 'completed'
    and exists(MS.reasonCode C where C ~ HC.&quot;Currently on PrEP&quot;)
    and exists(MS.statusReason SR where SR ~ HC.&quot;Continuing user&quot;)
  )
  
  define &quot;PREP Restarting&quot;:
  exists([MedicationStatement] MS
    where MS.status = 'completed'
    and exists(MS.reasonCode C where C ~ HC.&quot;Currently on PrEP&quot;)
    and exists(MS.statusReason SR where SR ~ HC.&quot;Restarting following a period of not taking PrEP&quot;)
  )

  define &quot;Daily_oral_PrEP&quot;:
  exists([MedicationStatement] MS
    where MS.status = 'completed'
    and exists(MS.reasonCode C where C ~ HC.&quot;Currently on PrEP&quot;)
    and exists(MS.dosage.additionalInstruction AI where AI ~ HC.&quot;Daily oral PrEP&quot;)
  )

  define &quot;Event_driven_PrEP&quot;:
  exists([MedicationStatement] MS
    where MS.status = 'completed'
    and exists(MS.reasonCode C where C ~ HC.&quot;Currently on PrEP&quot;)
    and exists(MS.dosage.additionalInstruction AI where AI ~ HC.&quot;Event-driven PrEP 2+1+1&quot;) 
  )

  define &quot;other_dosing_PrEP&quot;:
  exists([MedicationStatement] MS
    where MS.status = 'completed'
    and exists(MS.reasonCode C where C ~ HC.&quot;Currently on PrEP&quot;)
    and exists(MS.dosage.additionalInstruction AI where AI ~ HC.&quot;Other PrEP dosing type&quot;) 
  )


  define patientGroups:
  List&lt;String&gt;{
    if SW then 'SW' else null,
    if MSM then 'MSM' else null,
    if Trans then 'Trans' else null,
    if PWID then 'PWID' else null,
    if Prisoner then 'Prisoner' else null
  }

  define setting:
  List&lt;String&gt;{
    if Community_testing then 'Community-level testing' else null,
    if Facility_testing then 'Facility-level testing' else null
  }

  define anc:
  List&lt;String&gt;{
    if ANC_case then 'ANC case' else null
  }

  define tb:
  List&lt;String&gt;{
    if TB_diagnosed then 'Diagnosed TB' else null,
    if TB_presumptive then 'Presumptive TB' else null
  }

  define prep_product:
  List&lt;String&gt;{
    if `PREP Product Oral` then 'PREP Product Oral' else null,
    if `PREP Product long-acting device` then 'PREP Product long-acting device' else null,
    if `PREP Product long-acting injectable` then 'PREP Product long-acting injectable' else null
  }

  define prep_experience:
  List&lt;String&gt;{
    if `PREP first time` then 'PREP first time' else null,
    if `PREP Continuing user` then 'PREP Continuing user' else null,
    if `PREP Restarting` then 'PREP Restarting' else null
  }

  define prep_dosing:
  List&lt;String&gt;{
    if `Daily_oral_PrEP` then 'Daily oral PrEP' else null,
    if `Event_driven_PrEP` then 'Event driven PrEP' else null,
    if `other_dosing_PrEP` then 'Other PrEP dosing type' else null
  }

//need to add Time to start ART (within 7, 30 or 90 days of diagnosis, as per country guidelines)
//need to add Disaggregation by time since diagnosis
  


/* 
* DAK has codes for HAART misspecified 
* ICD-10 Z92.2	Other prophylactic chemotherapy		
* LOINC &quot;54825-5	&quot;	On scheduled pain medication regimen in last 7 days
*
* Should discuss 
*/







/*
* Kenya EMR defined as HIV positive condition
* Will need to discuss if produce flags through conditions for concepts to use in indicator calculation such as HIV positive and On ART
* However, we have moved forward with a more prescriptive approach 
* Inevitably our approach requires that certain data elements be available
*/

/*
 * HIV Treatment during the measurement period
 * uses dosage and dispensation amount to estimate last day of medication
 * medication should be dispensed before end of measurement period
 * medication should last until after 28 days after the end of the measurement period
 * This takes into account lost to follow up
 */

/*
*define &quot;HIV Treatment during the measurement period&quot;:
*   [MedicationDispense] MD
*    where MD.status in { 'final', 'amended', 'corrected' }
*    and MD.medication ~ 'Antiretroviral'
*    and MD.whenHandedOver before end of &quot;Measurement Period&quot;
*    and (MD.whenHandedOver + MD.dosageInstruction[0].timing.repeat.duration.value * MedicationDispense.quantity.value) after (measurementPeriod.end - 28 days)
*/ 

/*
* Immunization defines HAART as
*  exists([MedicationAdministration] A where ExtractMedicationCode(A.medication) in IMMZc.&quot;ARV Drugs&quot; and A.status = 'in-progress')
* I believe this is the incorrect resource unless they mean to say that medication is given during a medical encounter
* would like to discuss 
*/ 

/** 
 * Patient Deceased During Measurement Period
 * Immunization defines this as true when is a boolean. This may have the effect of deleting a person from indicators in all calculations
 * Should intend to use when patient.deceased FHIR boolean was updated to TRUE if no other date is available
 * Kenya EMR example does not account for when deceased is just a boolean
 */


/*
define &quot;PREP Prescription Days&quot;:
  Sum(
    (
      collapse (
        [MedicationRequest] MR
          where MR.status = 'completed'
          and MR.intent = 'order'
          and MR.medication ~ HC.&quot;PrEP for HIV prevention&quot;
        return WComV2.&quot;Prescription Relevant Period&quot;( MR ) intersect &quot;Measurement Period&quot;
      )
    ) PREPUseInterval
      return days between start of PREPUseInterval and end of PREPUseInterval
  )
*/


define function GetDurationInDays(value FHIR.Duration): // returns Decimal:
    case value.code.value
      when 'a' then value.value * 365.0
      when 'mo' then value.value.value * 30.0
      when 'wk' then value.value.value * 7.0
      when 'd' then value.value.value
      when 'h' then value.value.value / 24.0
      when 'min' then value.value.value / 60.0 / 24.0
      when 's' then value.value.value / 60.0 / 60.0 / 24.0
      when 'ms' then value.value.value / 60.0 / 60.0 / 24.0 / 1000.0
      else Message(1000, true, 'Undefined', 'Error', 'Unsupported duration unit ' + value.code.value)
    end

define function &quot;Prescription Relevant Period&quot;(prescription FHIR.MedicationRequest):
  if (
    prescription.authoredOn is not null and prescription.dispenseRequest is not null
      and prescription.dispenseRequest.expectedSupplyDuration is not null
  )
  then Interval[
    date from prescription.authoredOn,
    date from prescription.authoredOn + System.Quantity{ value: GetDurationInDays(prescription.dispenseRequest.expectedSupplyDuration), unit: 'days' }
  ]
  else null

//System.Integer
define function ToDaily(frequency System.Integer, period System.Quantity):
  case period.unit
    when 'h' then frequency * (24.0 / period.value)
    when 'min' then frequency * (24.0 / period.value) * 60
    when 's' then frequency * (24.0 / period.value) * 60 * 60
    when 'd' then frequency * (24.0 / period.value) / 24
    when 'wk' then frequency * (24.0 / period.value) / (24 * 7)
    when 'mo' then frequency * (24.0 / period.value) / (24 * 30) /* assuming 30 days in month */
    when 'a' then frequency * (24.0 / period.value) / (24 * 365) /* assuming 365 days in year */
    when 'hour' then frequency * (24.0 / period.value)
    when 'minute' then frequency * (24.0 / period.value) * 60
    when 'second' then frequency * (24.0 / period.value) * 60 * 60
    when 'day' then frequency * (24.0 / period.value) / 24
    when 'week' then frequency * (24.0 / period.value) / (24 * 7)
    when 'month' then frequency * (24.0 / period.value) / (24 * 30) /* assuming 30 days in month */
    when 'year' then frequency * (24.0 / period.value) / (24 * 365) /* assuming 365 days in year */
    when 'hours' then frequency * (24.0 / period.value)
    when 'minutes' then frequency * (24.0 / period.value) * 60
    when 'seconds' then frequency * (24.0 / period.value) * 60 * 60
    when 'days' then frequency * (24.0 / period.value) / 24
    when 'weeks' then frequency * (24.0 / period.value) / (24 * 7)
    when 'months' then frequency * (24.0 / period.value) / (24 * 30) /* assuming 30 days in month */
    when 'years' then frequency * (24.0 / period.value) / (24 * 365) /* assuming 365 days in year */
    else null
  end

  define function &quot;HasEnd&quot;(period Interval&lt;DateTime&gt; ):
  not (end of period is null
    or end of period = maximum DateTime
)

  define function MedicationRequestPeriod(Request &quot;MedicationRequest&quot;):
  Request R
    let
      dosage: singleton from R.dosageInstruction,
      doseAndRate: singleton from dosage.doseAndRate,
      doseRange: doseAndRate.dose as Range,
      doseQuantity: doseAndRate.dose as SimpleQuantity,
      dose: Coalesce(end of doseRange, doseQuantity),
      timing: dosage.timing,
      frequency: Coalesce(timing.repeat.frequencyMax, timing.repeat.frequency),
      period: System.Quantity { value: timing.repeat.period, unit: timing.repeat.periodUnit.value },
      dosesPerDay: Coalesce(ToDaily(FHIRHelpers.ToInteger(frequency), period), Count(timing.repeat.timeOfDay), 1.0),
      boundsPeriod: timing.repeat.bounds as Period,
      daysSupply: R.dispenseRequest.expectedSupplyDuration,
      quantity: R.dispenseRequest.quantity,
      refills: Coalesce(R.dispenseRequest.numberOfRepeatsAllowed, 0),
      startDate:
        Coalesce(
          start of boundsPeriod,
          start of R.dispenseRequest.validityPeriod,
          R.authoredOn
        )
    return
      if HasEnd(boundsPeriod) then
        Interval[startDate, end of boundsPeriod]
      else
        (
          Coalesce(daysSupply, quantity / (dose * dosesPerDay))
            * (1 + refills)
        ) durationInDays
          return Interval[startDate, startDate + durationInDays]


define function &quot;DosesPerDay&quot;(frequency Code):
	/*Calculates the cumulative dose per day for each prescription*/
	case
		when frequency ~ HCC.&quot;Once daily (qualifier value)&quot; then 1.0
		when frequency ~ HCC.&quot;Twice a day (qualifier value)&quot; then 2.0
		when frequency ~ HCC.&quot;Three times daily (qualifier value)&quot; then 3.0
		when frequency ~ HCC.&quot;Four times daily (qualifier value)&quot; then 4.0
		when frequency ~ HCC.&quot;Every twenty four hours (qualifier value)&quot; then 1.0
		when frequency ~ HCC.&quot;Every twelve hours (qualifier value)&quot; then 2.0
		when frequency ~ HCC.&quot;Every thirty six hours (qualifier value)&quot; then 0.67
		when frequency ~ HCC.&quot;Every eight hours (qualifier value)&quot; then 3.0
		when frequency ~ HCC.&quot;Every four hours (qualifier value)&quot; then 6.0
		when frequency ~ HCC.&quot;Every six hours (qualifier value)&quot; then 4.0
		when frequency ~ HCC.&quot;Every seventy two hours (qualifier value)&quot; then 0.34
		when frequency ~ HCC.&quot;Every forty eight hours (qualifier value)&quot; then 0.5
		when frequency ~ HCC.&quot;Every eight to twelve hours (qualifier value)&quot; then 2.0
		when frequency ~ HCC.&quot;Every six to eight hours (qualifier value)&quot; then 3.0
		when frequency ~ HCC.&quot;Every three to four hours (qualifier value)&quot; then 6.0
		when frequency ~ HCC.&quot;Every three to six hours (qualifier value)&quot; then 4.0
		when frequency ~ HCC.&quot;Every two to four hours (qualifier value)&quot; then 6.0
		when frequency ~ HCC.&quot;One to four times a day (qualifier value)&quot; then 4.0
		when frequency ~ HCC.&quot;One to three times a day (qualifier value)&quot; then 3.0
		when frequency ~ HCC.&quot;One to two times a day (qualifier value)&quot; then 2.0
		else null 
	end

  //define function &quot;GetMedicationDailyDose&quot;(dosage Quantity, dosesPerDay Decimal):
  //dosage * Quantity { value: dosesPerDay, unit: '/d' }


define &quot;methadone_prescribed at date&quot;:
[MedicationRequest] MR
        where MR.status = 'completed'
        and MR.intent = 'order'
        and MR.medication ~ HCC.&quot;methadone&quot;
        //and &quot;GetMedicationDailyDose&quot;(MR.dosageInstruction, &quot;DosesPerDay&quot;(singleton from MR.dosageInstruction.timing.repeat.frequencyMax)) &gt;= 60 'mg/d'
        and MedicationRequestPeriod(MR) starts before &quot;Measurement Date&quot;
        and MedicationRequestPeriod(MR) ends after &quot;Measurement Date&quot;

define &quot;VMMC_done&quot;:
[Procedure] P
  where P.status = 'completed'
  and P.code ~ HC.&quot;Voluntary medical male circumcision VMMC&quot;

define &quot;VMMC_adverse_event&quot;:
[AdverseEvent] AE 
  with [Procedure] P
      such that AE.suspectEntity.instance.references(P) and P.status = 'completed' 
      and P.code ~  HC.&quot;Voluntary medical male circumcision VMMC&quot;
      and P.performed after start of &quot;Measurement Period&quot;
      and P.performed before end of &quot;Measurement Period&quot;
      and AE.date &lt;= (P.performed + 30 days)
      and AE.date &gt;= (P.performed)
  where AE.actuality = 'actual'

define &quot;VMMC_adverse_event_type&quot;:
    case 
        when exists(&quot;VMMC_adverse_event&quot; AE where AE.event ~ HC.&quot;Abnormal pain&quot;) then  HC.&quot;Abnormal pain&quot;
        when exists(&quot;VMMC_adverse_event&quot; AE where AE.event ~ HC.&quot;Anaesthesia-related effects&quot;) then  HC.&quot;Anaesthesia-related effects&quot;
        when exists(&quot;VMMC_adverse_event&quot; AE where AE.event ~ HC.&quot;Damage to the penis&quot;) then  HC.&quot;Damage to the penis&quot;
        when exists(&quot;VMMC_adverse_event&quot; AE where AE.event ~ HC.&quot;Difficulty urinating&quot;) then  HC.&quot;Difficulty urinating&quot;
        when exists(&quot;VMMC_adverse_event&quot; AE where AE.event ~ HC.&quot;Excessive bleeding&quot;) then  HC.&quot;Excessive bleeding&quot;
        when exists(&quot;VMMC_adverse_event&quot; AE where AE.event ~ HC.&quot;Excessive skin removal&quot;) then  HC.&quot;Excessive skin removal&quot;
        when exists(&quot;VMMC_adverse_event&quot; AE where AE.event ~ HC.&quot;Excessive swelling&quot;) then  HC.&quot;Excessive swelling&quot;
        when exists(&quot;VMMC_adverse_event&quot; AE where AE.event ~ HC.&quot;Haematoma&quot;) then  HC.&quot;Haematoma&quot;
        when exists(&quot;VMMC_adverse_event&quot; AE where AE.event ~ HC.&quot;Infection&quot;) then  HC.&quot;Infection&quot;
        when exists(&quot;VMMC_adverse_event&quot; AE where AE.event ~ HC.&quot;Injury to glans&quot;) then  HC.&quot;Injury to glans&quot;
        when exists(&quot;VMMC_adverse_event&quot; AE where AE.event ~ HC.&quot;Scar or disfigurement&quot;) then  HC.&quot;Scar or disfigurement&quot;
        when exists(&quot;VMMC_adverse_event&quot; AE where AE.event ~ HC.&quot;Sharps injury to personnel&quot;) then  HC.&quot;Sharps injury to personnel&quot;
        when exists(&quot;VMMC_adverse_event&quot; AE where AE.event ~ HC.&quot;Wound disruption&quot;) then  HC.&quot;Wound disruption&quot;
        else HC.&quot;Other - HIV.B.DE222&quot;
    end

define &quot;VMMC_adverse_event_Intraoperative&quot;:
[AdverseEvent] AE 
  with [Procedure] P
      such that AE.suspectEntity.instance.references(P) and P.status = 'completed' 
      and P.code ~  HC.&quot;Voluntary medical male circumcision VMMC&quot;
      and P.performed after start of &quot;Measurement Period&quot;
      and P.performed before end of &quot;Measurement Period&quot;
      and AE.date = P.performed
  where AE.actuality = 'actual'

define &quot;VMMC_adverse_event_Postoperative&quot;:
[AdverseEvent] AE 
  with [Procedure] P
      such that AE.suspectEntity.instance.references(P) and P.status = 'completed' 
      and P.code ~  HC.&quot;Voluntary medical male circumcision VMMC&quot;
      and P.performed after start of &quot;Measurement Period&quot;
      and P.performed before end of &quot;Measurement Period&quot;
      and AE.date &lt;= (P.performed + 30 days)
      and AE.date &gt; (P.performed)
  where AE.actuality = 'actual'

  define &quot;VMMC_adverse_event_timing&quot;:
    case 
        when exists(VMMC_adverse_event_Intraoperative) then  HC.&quot;Intraoperative&quot;
        when exists(VMMC_adverse_event_Postoperative) then  HC.&quot;Postoperative&quot;
        else null
    end


  define &quot;Partner or contact of an index case&quot;:
    [Observation: HC.&quot;Referred through partner services&quot;] O 
    where O.status in { 'final', 'amended', 'corrected' }
    and exists(O.category OC where OC ~ HCC.&quot;social-history&quot;)
    and O.code ~ HC.&quot;Partner or contact of an index case&quot;
  
  define &quot;Drug-injecting partner&quot;:
    [Observation: HC.&quot;Type of contact or partner for partner services&quot;] O 
    where O.status in { 'final', 'amended', 'corrected' }
    and exists(O.category OC where OC ~ HCC.&quot;social-history&quot;)
    and O.code ~ HC.&quot;Drug-injecting partner - HIV.B.DE10&quot;
  
  define &quot;Sexual partner&quot;:
    [Observation: HC.&quot;Type of contact or partner for partner services&quot;] O 
    where O.status in { 'final', 'amended', 'corrected' }
    and exists(O.category OC where OC ~ HCC.&quot;social-history&quot;)
    and O.code ~ HC.&quot;Sexual partner - HIV.B.DE11&quot; 
  

  define &quot;First HIV Treatment&quot;:
    First(&quot;HIV Treatment Active&quot;)


  define &quot;Time to start ART&quot;:
    case 
        when difference in days between &quot;First HIV Treatment&quot;.effective and &quot;HIV Positive Condition&quot;.onset &lt;= 7 then HC.&quot;Within 7 days of HIV diagnosis&quot;
        when difference in days between &quot;First HIV Treatment&quot;.effective and &quot;HIV Positive Condition&quot;.onset &lt;= 30 then HC.&quot;Within 30 days of HIV diagnosis&quot;
        when difference in days between &quot;First HIV Treatment&quot;.effective and &quot;HIV Positive Condition&quot;.onset &lt;= 90 then HC.&quot;Within 90 days of HIV diagnosis&quot;
    else null
    end
  
  //HIV status of partner or contact (already known positive, newly diagnosed positive, negative) 

  define &quot;already known positive&quot;:
    [Observation: HC.&quot;HIV status of partner or contact&quot;] O 
    where O.status in { 'final', 'amended', 'corrected' }
    and exists(O.category OC where OC ~ HCC.&quot;social-history&quot;)
    and O.code ~ HC.&quot;Already knew positive&quot;
  
  define &quot;Newly diagnosed&quot;:
    [Observation: HC.&quot;HIV status of partner or contact&quot;] O 
    where O.status in { 'final', 'amended', 'corrected' }
    and exists(O.category OC where OC ~ HCC.&quot;social-history&quot;)
    and O.code ~ HC.&quot;Newly diagnosed&quot;

  define &quot;Negative - HIV.H.DE37&quot;:
    [Observation: HC.&quot;HIV status of partner or contact&quot;] O 
    where O.status in { 'final', 'amended', 'corrected' }
    and exists(O.category OC where OC ~ HCC.&quot;social-history&quot;)
    and O.code ~ HC.&quot;Negative - HIV.H.DE37&quot;
  
  define &quot;HIV status of partner or contact&quot;:
    case 
        when exists(&quot;already known positive&quot;) then HC.&quot;Already knew positive&quot;
        when exists(&quot;Newly diagnosed&quot;) then HC.&quot;Newly diagnosed&quot;
        when exists(&quot;Negative - HIV.H.DE37&quot;) then HC.&quot;Negative - HIV.H.DE37&quot;
        else null
    end


//need to define
  define STI_testing:
    [Procedure] P
  where P.status = 'completed'
  and P.code ~ HC.&quot;STI testing and treatment services&quot;


//(including PrEP, OAMT, NSP, STI services, VMMC) 
  define &quot;HIV prevention intervention&quot;:
  List&lt;String&gt;{
    if &quot;HIV PREP Active&quot; then 'PrEP' else null,
    if OAMT_initiated then 'OAMT' else null,
    if &quot;Needle Syringe Dispensed&quot; then 'NSP' else null,
    if STI_testing then 'STI services' else null,
    if VMMC_done then 'VMMC' else null
  }

define &quot;Negative Tests within Measurement Period&quot;:
HIC.&quot;HIV Negative Observation&quot; O
    with HIC.&quot;Client is at elevated risk for HIV acquisition&quot; HIV
    such that O.hasMember.references(HIV)
    and O.issued after start of &quot;Measurement Period&quot;
    and O.issued before end of &quot;Measurement Period&quot;
Sort by O.issued

define &quot;First Negative Test within Measurement Period&quot;:
( First(&quot;Negative Tests within Measurement Period&quot;))

define &quot;Negative Tests after First Negative Test&quot;:
HIC.&quot;HIV Negative Observation&quot; O
    with HIC.&quot;Client is at elevated risk for HIV acquisition&quot; HIV
    such that O.hasMember.references(HIV)
    and O.issued after &quot;First Negative Test within Measurement Period&quot;
    and O.issued before (&quot;First Negative Test within Measurement Period&quot; + &quot;Testing Interval&quot;)
Sort by O.issued</code></pre><p><code>No Content</code> (<code>application/elm+xml</code>)</p></div>
  </text>
  <extension url="http://hl7.org/fhir/StructureDefinition/cqf-knowledgeCapability">
    <valueCode value="computable"/>
  </extension>
  <url value="http://smart.who.int/HIV/Library/HIVCommon"/>
  <version value="0.2.0"/>
  <name value="HIVCommon"/>
  <title value="HIVCommon"/>
  <status value="draft"/>
  <experimental value="true"/>
  <type>
    <coding>
      <system value="http://terminology.hl7.org/CodeSystem/library-type"/>
      <code value="logic-library"/>
    </coding>
  </type>
  <date value="2024-07-24T18:44:05+00:00"/>
  <publisher value="WHO"/>
  <contact>
    <name value="WHO"/>
    <telecom>
      <system value="url"/>
      <value value="http://who.int"/>
    </telecom>
  </contact>
  <description value="Description not yet available for HIVCommon."/>
  <content>
    <contentType value="text/cql"/>
    <data value="bGlicmFyeSBISVZDb21tb24gdmVyc2lvbiAnMC4wLjEnIAoKdXNpbmcgRkhJUiB2ZXJzaW9uICc0LjAuMScKCmluY2x1ZGUgRkhJUkhlbHBlcnMgdmVyc2lvbiAnNC4wLjEnCmluY2x1ZGUgV0hPQ29tbW9uIGNhbGxlZCBXQ29tCi8vaW5jbHVkZSBGSElSQ29tbW9uIGNhbGxlZCBGQwppbmNsdWRlIEhJVkNvbmNlcHRzIGNhbGxlZCBIQwppbmNsdWRlIEhJVkNvbmNlcHRzQ3VzdG9tIGNhbGxlZCBIQ0MKCnBhcmFtZXRlciAiTWVhc3VyZW1lbnQgUGVyaW9kIiBJbnRlcnZhbDxEYXRlPiBkZWZhdWx0IEludGVydmFsW0AyMDIwLTAxLTAxLCBAMjAyMC0xMi0zMV0KcGFyYW1ldGVyICJNZWFzdXJlbWVudCBEYXRlIiBEYXRlIGRlZmF1bHQgQDIwMjAtMDEtMDEKcGFyYW1ldGVyICJUZXN0aW5nIEludGVydmFsIiBTeXN0ZW0uUXVhbnRpdHkgZGVmYXVsdCAzIG1vbnRocwpwYXJhbWV0ZXIgIkludGVydmVudGlvbiBJbnRlcnZhbCIgU3lzdGVtLlF1YW50aXR5IGRlZmF1bHQgNyBkYXlzCgpjb250ZXh0IFBhdGllbnQKCi8qCiAqIEhJViBQb3NpdGl2ZSBkdXJpbmcgdGhlIG1lYXN1cmVtZW50IHBlcmlvZAogKiBEb2VzIGlzc3VlZCBpbXBseSB0aGF0IHJlc3VsdHMgcmV0dXJuZWQgdG8gdGVzdGVyCiAqIG9yIHNob3VsZCB1c2UgY29tbXVuaWNhdGlvbiBvciBlbmNvdW50ZXIgcmVzb3VyY2UgdG8gc3BlY2lmeT8KICovCgoKCmRlZmluZSAiSElWIFBvc2l0aXZlIENvbmRpdGlvbiI6CltDb25kaXRpb25dIEMKICAgIHdoZXJlIEMuY2xpbmljYWxTdGF0dXMgfiBIQ0MuImFjdGl2ZSIKICAgIGFuZCBleGlzdHMoQy5jYXRlZ29yeSBDQyB3aGVyZSBDQyB+IEhDQy4iZW5jb3VudGVyLWRpYWdub3NpcyIpCiAgICBhbmQgQy5jb2RlIH4gSEMuIkhJVi1wb3NpdGl2ZSAtIEhJVi5CLkRFMTE2IgoKZGVmaW5lICJISVYgUG9zaXRpdmUgT2JzZXJ2YXRpb24iOgpbT2JzZXJ2YXRpb25dIE8KICAgIHdoZXJlIE8uc3RhdHVzIGluIHsnZmluYWwnLCAnYW1lbmRlZCd9CiAgICBhbmQgTy5jb2RlIH4gSEMuIkhJViBzdGF0dXMiCiAgICBhbmQgTy52YWx1ZSB+IEhDLiJISVYtcG9zaXRpdmUgLSBISVYuQi5ERTExNiIKCmRlZmluZSAiSElWIFBvc2l0aXZlIE9ic2VydmF0aW9uIC0gSElWIFNlbGYgVGVzdCI6CltPYnNlcnZhdGlvbl0gTwogICAgd2hlcmUgTy5zdGF0dXMgaW4geydmaW5hbCcsICdhbWVuZGVkJ30KICAgIGFuZCBPLmNvZGUgfiBIQy4iSElWIHNlbGYtdGVzdCIKICAgIGFuZCBPLnZhbHVlIH4gSEMuIkhJVi1wb3NpdGl2ZSAtIEhJVi5CLkRFMTE2IgoKZGVmaW5lICJISVYgTmVnYXRpdmUgT2JzZXJ2YXRpb24iOgpbT2JzZXJ2YXRpb25dIE8KICAgIHdoZXJlIE8uc3RhdHVzIGluIHsnZmluYWwnLCAnYW1lbmRlZCd9CiAgICBhbmQgTy5jb2RlIH4gSEMuIlJhcGlkIGRpYWdub3N0aWMgdGVzdCBmb3IgSElWIC0gSElWLkIuREU4MiIKICAgIGFuZCBPLnZhbHVlIH4gSEMuIkhJVi1uZWdhdGl2ZSAtIEhJVi5CLkRFMTE3IgoKZGVmaW5lICJISVYgdGVzdCByZXN1bHRlZCI6CiAgW09ic2VydmF0aW9uXSBPCiAgICB3aGVyZSBPLnN0YXR1cyBpbiB7J2ZpbmFsJywgJ2FtZW5kZWQnfQogICAgYW5kIE8uY29kZSB+IEhDLiJSYXBpZCBkaWFnbm9zdGljIHRlc3QgZm9yIEhJViAtIEhJVi5CLkRFODIiCgpkZWZpbmUgIkhJViBUcmVhdG1lbnQgQWN0aXZlIjoKW01lZGljYXRpb25TdGF0ZW1lbnRdIE1TClNvcnQgYnkgTVMuZWZmZWN0aXZlCiAgICB3aGVyZSBNUy5zdGF0dXMgPSAnY29tcGxldGVkJwogICAgYW5kIGV4aXN0cyhNUy5yZWFzb25Db2RlIEMgd2hlcmUgQyB+IEhDLiJPbiBBUlQgLSBISVYuSC5ERTQ3IikKICAgIAoKCmRlZmluZSAiSElWIFBSRVAgQWN0aXZlIjoKW01lZGljYXRpb25TdGF0ZW1lbnRdIE1TCiAgICB3aGVyZSBNUy5zdGF0dXMgPSAnY29tcGxldGVkJwogICAgYW5kIGV4aXN0cyhNUy5yZWFzb25Db2RlIEMgd2hlcmUgQyB+IEhDLiJQckVQIGZvciBISVYgcHJldmVudGlvbiIpCgogZGVmaW5lICJDbGllbnQgaXMgYXQgZWxldmF0ZWQgcmlzayBmb3IgSElWIGFjcXVpc2l0aW9uIjoKICAgIFtPYnNlcnZhdGlvbl0gTwogICAgd2hlcmUgTy5zdGF0dXMgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcsICdjb3JyZWN0ZWQnIH0KICAgIGFuZCBleGlzdHMoTy5jYXRlZ29yeSBPQyB3aGVyZSBPQyB+IEhDQy4ic29jaWFsLWhpc3RvcnkiKQogICAgYW5kIE8uY29kZSB+IEhDLiJBdCBlbGV2YXRlZCByaXNrIGZvciBISVYgYWNxdWlzaXRpb24gLSBISVYuQi5ERTIyNSIKCmRlZmluZSAiUFJFUCBQcmVzY3JpcHRpb24iOgogICAgW01lZGljYXRpb25SZXF1ZXN0XSBNUgogICAgICAgIHdoZXJlIE1SLnN0YXR1cyA9ICdjb21wbGV0ZWQnCiAgICAgICAgYW5kIE1SLmludGVudCA9ICdvcmRlcicKICAgICAgICBhbmQgTVIubWVkaWNhdGlvbiB+IEhDLiJQckVQIGZvciBISVYgcHJldmVudGlvbiIKCmRlZmluZSAiUEVQIFByZXNjcmlwdGlvbiI6CiAgICBbTWVkaWNhdGlvblJlcXVlc3RdIE1SCiAgICAgICAgd2hlcmUgTVIuc3RhdHVzID0gJ2NvbXBsZXRlZCcKICAgICAgICBhbmQgTVIuaW50ZW50ID0gJ29yZGVyJwogICAgICAgIGFuZCBNUi5tZWRpY2F0aW9uIH4gSEMuIlBFUCBmb3IgSElWIHByZXZlbnRpb24iCgpkZWZpbmUgIlBFUCBQcmVzY3JpYmVkIGJlZm9yZSBzdGFydCBvZiBNZWFzdXJlbWVudCBQZXJpb2QgYW5kIENvbXBsZXRlZCI6CiAgW01lZGljYXRpb25TdGF0ZW1lbnRdIE1TCiAgICB3aXRoIFtNZWRpY2F0aW9uUmVxdWVzdF0gTVIKICAgICAgc3VjaCB0aGF0IE1TLmJhc2VkT24ucmVmZXJlbmNlcyhNUikgYW5kIE1SLnN0YXR1cyA9ICdjb21wbGV0ZWQnCiAgICAgICAgYW5kIE1SLmludGVudCA9ICdvcmRlcicKICAgICAgICBhbmQgTVIubWVkaWNhdGlvbiB+IEhDLiJQRVAgZm9yIEhJViBwcmV2ZW50aW9uIgogICAgICAgIGFuZCBNUi5hdXRob3JlZE9uIGJlZm9yZSBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIKICB3aGVyZSAoTVMuc3RhdHVzID0gJ2NvbXBsZXRlZCcKICBhbmQgZXhpc3RzKE1TLnJlYXNvbkNvZGUgQyB3aGVyZSBDIH4gSEMuIlByRVAgZm9yIEhJViBwcmV2ZW50aW9uIikKICApCgpkZWZpbmUgIlBFUCBQcmVzY3JpYmVkIGR1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QgYW5kIENvbXBsZXRlZCI6CiAgW01lZGljYXRpb25TdGF0ZW1lbnRdIE1TCiAgICB3aXRoIFtNZWRpY2F0aW9uUmVxdWVzdF0gTVIKICAgICAgc3VjaCB0aGF0IE1TLmJhc2VkT24ucmVmZXJlbmNlcyhNUikgYW5kIE1SLnN0YXR1cyA9ICdjb21wbGV0ZWQnCiAgICAgICAgYW5kIE1SLmludGVudCA9ICdvcmRlcicKICAgICAgICBhbmQgTVIubWVkaWNhdGlvbiB+IEhDLiJQRVAgZm9yIEhJViBwcmV2ZW50aW9uIgogICAgICAgIGFuZCBNUi5hdXRob3JlZE9uIGFmdGVyIHN0YXJ0IG9mICJNZWFzdXJlbWVudCBQZXJpb2QiCiAgICAgICAgYW5kIE1SLmF1dGhvcmVkT24gYmVmb3JlIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIgogIHdoZXJlIChNUy5zdGF0dXMgPSAnY29tcGxldGVkJwogIGFuZCBleGlzdHMoTVMucmVhc29uQ29kZSBDIHdoZXJlIEMgfiBIQy4iUHJFUCBmb3IgSElWIHByZXZlbnRpb24iKQogICkKCmRlZmluZSAiSElWIFRlc3QgUG9zaXRpdmUgQWZ0ZXIgUEVQIFByZXNjcmliZWQgZHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCI6CiAgW09ic2VydmF0aW9uOiBIQy4iSElWIHRlc3QgcmVzdWx0IC0gSElWLkIuREUxMTEiXSBPCiAgICB3aXRoIFtNZWRpY2F0aW9uUmVxdWVzdF0gTVIKICAgICAgc3VjaCB0aGF0IE8uYmFzZWRPbi5yZWZlcmVuY2VzKE1SKSBhbmQgTVIuc3RhdHVzID0gJ2NvbXBsZXRlZCcKICAgICAgICBhbmQgTVIuaW50ZW50ID0gJ29yZGVyJwogICAgICAgIGFuZCBNUi5tZWRpY2F0aW9uIH4gSEMuIlBFUCBmb3IgSElWIHByZXZlbnRpb24iCiAgICAgICAgYW5kIE1SLmF1dGhvcmVkT24gYWZ0ZXIgc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIKICAgICAgICBhbmQgTVIuYXV0aG9yZWRPbiBiZWZvcmUgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiCiAgICAgICAgYW5kIE8uaXNzdWVkIGJlZm9yZSAoTVIuYXV0aG9yZWRPbiArIDMgbW9udGhzKQogIHdoZXJlICggTy5zdGF0dXMgaW4geydmaW5hbCcsICdhbWVuZGVkJ30KICAgIGFuZCBPLnZhbHVlIH4gSEMuIkhJVi1wb3NpdGl2ZSAtIEhJVi5CLkRFMTEyIgogICkKCmRlZmluZSAiTmVlZGxlIFN5cmluZ2UgRGlzcGVuc2VkIjogIAogIFtEZXZpY2VVc2VTdGF0ZW1lbnRdIERVUwogIHdpdGggW09ic2VydmF0aW9uOiBIQy4iS2V5IHBvcHVsYXRpb24gbWVtYmVyKiAtIEhJVi5FLkRFMTEzIl0gTwogICAgICBzdWNoIHRoYXQgRFVTLnJlYXNvblJlZmVyZW5jZS5yZWZlcmVuY2VzKE8pIAogICAgICAgIGFuZCBPLnN0YXR1cyBpbiB7ICdmaW5hbCcsICdhbWVuZGVkJywgJ2NvcnJlY3RlZCcgfQogICAgICAgIGFuZCBleGlzdHMoTy5jYXRlZ29yeSBPQyB3aGVyZSBPQyB+IEhDQy4ic29jaWFsLWhpc3RvcnkiKQogICAgICAgIGFuZCBPLnZhbHVlIH4gSEMuIlBlb3BsZSB3aG8gaW5qZWN0IGRydWdzIC0gSElWLkIuREU1NCIKICB3aGVyZSBEVVMuc3RhdHVzID0gJ2NvbXBsZXRlZCcKCmRlZmluZSBQV0lEX3BlcnNvbjoKICBbT2JzZXJ2YXRpb246IEhDLiJLZXkgcG9wdWxhdGlvbiBtZW1iZXIqIC0gSElWLkUuREUxMTMiXSBPCiAgd2hlcmUgTy5zdGF0dXMgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcsICdjb3JyZWN0ZWQnIH0KICAgIGFuZCBleGlzdHMoTy5jYXRlZ29yeSBPQyB3aGVyZSBPQyB+IEhDQy4ic29jaWFsLWhpc3RvcnkiKQogICAgYW5kIE8udmFsdWUgfiBIQy4iUGVvcGxlIHdobyBpbmplY3QgZHJ1Z3MgLSBISVYuQi5ERTU0IgoKZGVmaW5lICJPQU1UX2luaXRpYXRlZCI6CmV4aXN0cygKICAgIFtFcGlzb2RlT2ZDYXJlXSBFT0MKICAgIHdoZXJlIGV4aXN0cyhFT0MudHlwZSBUIHdoZXJlIFQgfiBIQy4iT0FNVCIpCiAgICBhbmQgKGV4aXN0cyAoCiAgICAgIEVPQy5zdGF0dXNIaXN0b3J5IEgKICAgICAgd2hlcmUgSC5wZXJpb2Qgc3RhcnRzIGFmdGVyIHN0YXJ0IG9mICJNZWFzdXJlbWVudCBQZXJpb2QiCiAgICAgIGFuZCBILnBlcmlvZCBzdGFydHMgYmVmb3JlIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIgogICAgKSAKICAgIG9yICgKICAgICAgRU9DLnBlcmlvZCBzdGFydHMgYWZ0ZXIgc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIKICAgICAgYW5kIEVPQy5wZXJpb2Qgc3RhcnRzIGJlZm9yZSBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIKICAgICkKICAgICkKICAgICkKCmRlZmluZSAiT0FNVF9yZXRhaW5lZCI6CmV4aXN0cygKICAgIFtFcGlzb2RlT2ZDYXJlXSBFT0MKICAgIHdoZXJlIGV4aXN0cyhFT0MudHlwZSBUIHdoZXJlIFQgfiBIQy4iT0FNVCIpCiAgICBhbmQgKGV4aXN0cyAoCiAgICAgIEVPQy5zdGF0dXNIaXN0b3J5IEgKICAgICAgd2hlcmUgSC5wZXJpb2Qgc3RhcnRzIGFmdGVyIHN0YXJ0IG9mICJNZWFzdXJlbWVudCBQZXJpb2QiCiAgICAgIGFuZCBILnBlcmlvZCBzdGFydHMgYmVmb3JlIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIgogICAgICBhbmQgSC5wZXJpb2QgZW5kcyBhZnRlciAoZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiICsgNiBtb250aHMpCiAgICApIAogICAgb3IgKAogICAgICBFT0MucGVyaW9kIHN0YXJ0cyBhZnRlciBzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIgogICAgICBhbmQgRU9DLnBlcmlvZCBzdGFydHMgYmVmb3JlIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIgogICAgICBhbmQgKEVPQy5wZXJpb2QgZW5kcyBhZnRlciAoZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiICsgNiBtb250aHMpCiAgICAgIG9yIGVuZCBvZiBFT0MucGVyaW9kIGlzIG51bGwpCiAgICApCiAgICApCiAgICApCgpkZWZpbmUgIm1ldGhhZG9uZV9wcmVzY3JpYmVkIjoKW01lZGljYXRpb25SZXF1ZXN0XSBNUgogICAgICAgIHdoZXJlIE1SLnN0YXR1cyA9ICdjb21wbGV0ZWQnCiAgICAgICAgYW5kIE1SLmludGVudCA9ICdvcmRlcicKICAgICAgICBhbmQgTVIubWVkaWNhdGlvbiB+IEhDQy4ibWV0aGFkb25lIgoKZGVmaW5lICJidXByZW5vcnBoaW5lX3ByZXNjcmliZWQiOgpbTWVkaWNhdGlvblJlcXVlc3RdIE1SCiAgICAgICAgd2hlcmUgTVIuc3RhdHVzID0gJ2NvbXBsZXRlZCcKICAgICAgICBhbmQgTVIuaW50ZW50ID0gJ29yZGVyJwogICAgICAgIGFuZCBNUi5tZWRpY2F0aW9uIH4gSENDLiJidXByZW5vcnBoaW5lIgogIApkZWZpbmUgIlBhdGllbnQgRGVjZWFzZWQgYmVmb3JlIGVuZCBvZiBNZWFzdXJlbWVudCBQZXJpb2QiOgogIGNhc2UgCiAgICB3aGVuIFBhdGllbnQuZGVjZWFzZWQgaXMgRkhJUi5ib29sZWFuIGFuZCBQYXRpZW50LmRlY2Vhc2VkIH4gdHJ1ZSB0aGVuIChQYXRpZW50Lm1ldGEubGFzdFVwZGF0ZWQgYmVmb3JlIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikKICAgIHdoZW4gUGF0aWVudC5kZWNlYXNlZCBpcyBGSElSLmRhdGVUaW1lIHRoZW4gUGF0aWVudC5kZWNlYXNlZCBhcyBGSElSLmRhdGVUaW1lIGJlZm9yZSBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIKICAgIGVsc2UgZmFsc2UKICBlbmQKCmRlZmluZSAiUGF0aWVudCBEZWNlYXNlZCBkdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIjoKICBjYXNlIAogICAgd2hlbiBQYXRpZW50LmRlY2Vhc2VkIGlzIEZISVIuYm9vbGVhbiBhbmQgUGF0aWVudC5kZWNlYXNlZCB+IHRydWUgdGhlbiBQYXRpZW50Lm1ldGEubGFzdFVwZGF0ZWQgYmVmb3JlIGVuZCBvZiAgIk1lYXN1cmVtZW50IFBlcmlvZCIgYW5kICBQYXRpZW50Lm1ldGEubGFzdFVwZGF0ZWQgYWZ0ZXIgc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIKICAgIHdoZW4gUGF0aWVudC5kZWNlYXNlZCBpcyBGSElSLmRhdGVUaW1lIHRoZW4gUGF0aWVudC5kZWNlYXNlZCBhcyBGSElSLmRhdGVUaW1lIGJlZm9yZSBlbmQgb2YgICJNZWFzdXJlbWVudCBQZXJpb2QiIGFuZCBQYXRpZW50LmRlY2Vhc2VkIGFzIEZISVIuZGF0ZVRpbWUgYWZ0ZXIgc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIKICAgIGVsc2UgZmFsc2UKICBlbmQKCi8qIEVuZCBvZiBjYXJlIGJlY2F1c2Ugb2YgdHJhbnNmZXJyaW5nIG91dCovCgpkZWZpbmUgIlRyYW5zZmVyIE91dCBhdCBGYWNpbGl0eSBkdXJpbmcgdGhlIG1lYXN1cmVtZW50IHBlcmlvZCI6CiAgICBleGlzdHMoCiAgICBbRXBpc29kZU9mQ2FyZV0gRU9DCiAgICB3aGVyZSBleGlzdHMoRU9DLnR5cGUgVCB3aGVyZSBUIH4gSEMuIk9uIEFSVCAtIEhJVi5ILkRFNDciKSAKICAgIGFuZCAoZXhpc3RzICgKICAgICAgRU9DLnN0YXR1c0hpc3RvcnkgSAogICAgICB3aGVyZSBILnN0YXR1cyA9ICdmaW5pc2hlZCcKICAgICAgYW5kIEgucGVyaW9kIGVuZHMgZHVyaW5nICJNZWFzdXJlbWVudCBQZXJpb2QiCiAgICApIAogICAgb3IgKAogICAgICBFT0Muc3RhdHVzID0gJ2ZpbmlzaGVkJwogICAgICBhbmQgRU9DLnBlcmlvZCBlbmRzIGR1cmluZyAiTWVhc3VyZW1lbnQgUGVyaW9kIgogICAgKQogICAgKQogICAgKQoKZGVmaW5lICJMb3N0IHRvIEZvbGxvdyBVcCBkdXJpbmcgdGhlIG1lYXN1cmVtZW50IHBlcmlvZCI6CiAgICBleGlzdHMoIkhJViBUcmVhdG1lbnQgQWN0aXZlIiBICiAgIHdoZXJlIEguZWZmZWN0aXZlIHN0YXJ0cyBiZWZvcmUgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiCiAgICBhbmQgSC5lZmZlY3RpdmUgZW5kcyBhZnRlciBzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIgoJYW5kIG5vdCAoSC5lZmZlY3RpdmUgZW5kcyBhZnRlciAoZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiIC0gMjggZGF5cykpCiAgICkKCi8qCiAqIEJ5IEFnZSBTdHJhdGlmaWVycwogKiAoMOKAkzQsIDXigJM5LCAxMOKAkzE0LCAxNeKAkzE5LCAyMOKAkzI0LCAyNeKAkzI5LCAzMOKAkzM0LCAzNeKAkzM5LCA0MOKAkzQ0LCA0NeKAkzQ5LCA1MCsgeWVhcnMpCiAqIAogKi8KZGVmaW5lICJCeSBBZ2UgU3RyYXRpZmllciI6CiAgICBjYXNlIAogICAgICAgIHdoZW4gQWdlSW5ZZWFyc0F0KHN0YXJ0IG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKSA8PSA0IHRoZW4gJzAtNCcKICAgICAgICB3aGVuIEFnZUluWWVhcnNBdChzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPD0gOSB0aGVuICc1LTknCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDw9IDE0IHRoZW4gJzEw4oCTMTQnCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDw9IDE5IHRoZW4gJzE14oCTMTknCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDw9IDI0IHRoZW4gJzIw4oCTMjQnCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDw9IDI5IHRoZW4gJzI14oCTMjknCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDw9IDM0IHRoZW4gJzMw4oCTMzQnCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDw9IDM5IHRoZW4gJzM14oCTMzknCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDw9IDQ0IHRoZW4gJzQw4oCTNDQnCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDw9IDQ5IHRoZW4gJzQ14oCTNDknCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpID49IDUwIHRoZW4gJzUwKycKICAgICAgICBlbHNlIG51bGwKICAgIGVuZAogIAogIC8qCiAqIEJ5IEFnZSBTdHJhdGlmaWVycwogKiBBZ2UgKDDigJM0LCA14oCTOSwgMTDigJMxNCwgMTXigJMxOSwgMjDigJMyNCwgMjXigJM0OSwgNTArIHllYXJzKQogKiAKICovCmRlZmluZSAiQnkgQWdlIFN0cmF0aWZpZXIgMiI6CiAgICBjYXNlIAogICAgICAgIHdoZW4gQWdlSW5ZZWFyc0F0KHN0YXJ0IG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKSA8PSA0IHRoZW4gJzAtNCcKICAgICAgICB3aGVuIEFnZUluWWVhcnNBdChzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPD0gOSB0aGVuICc1LTknCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDw9IDE0IHRoZW4gJzEw4oCTMTQnCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDw9IDE5IHRoZW4gJzE14oCTMTknCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDw9IDI0IHRoZW4gJzIw4oCTMjQnCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDw9IDQ5IHRoZW4gJzI14oCTNDknCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpID49IDUwIHRoZW4gJzUwKycKICAgICAgICBlbHNlIG51bGwKICAgIGVuZAoKZGVmaW5lICJCeSBBZ2UgU3RyYXRpZmllciAzIjoKICAgIGNhc2UgCiAgICAgICAgd2hlbiBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpID49IDE1IGFuZCBBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDw9IDE5IHRoZW4gJzE1LTE5JwogICAgICAgIHdoZW4gQWdlSW5ZZWFyc0F0KHN0YXJ0IG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKSA8PSAyNCB0aGVuICcyMC0yNCcKICAgICAgICB3aGVuIEFnZUluWWVhcnNBdChzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPD0gNDkgdGhlbiAnMjXigJM0OScKICAgICAgICB3aGVuIEFnZUluWWVhcnNBdChzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPj0gNTAgdGhlbiAnNTArJwogICAgICAgIGVsc2UgbnVsbAogICAgZW5kCgovKgogKiBCeSBzdGF0ZSBzdHJhdGlmaWVyCiAqLwoKZGVmaW5lICJCeSBHZW9ncmFwaGljIFJlZ2lvbiBTdHJhdGlmaWVyIjoKICAgIEZpcnN0KFBhdGllbnQuYWRkcmVzcyBBIHdoZXJlIEEudXNlIGluIHsgJ2hvbWUnIH0pLnN0YXRlCgovKgogKiBCeSBBZG1pbmlzdHJhdGl2ZSBHZW5kZXIgb2YgUGF0aWVudCBTdHJhdGlmaWVyCiAqIE5lZWQgdG8gZXhwYW5kIGNvZGVzCiAqLwoKZGVmaW5lICJCeSBBZG1pbmlzdHJhdGl2ZSBHZW5kZXIgU3RyYXRpZmllciI6CiAgICBjYXNlIAogICAgICAgIHdoZW4gUGF0aWVudC5nZW5kZXIgPSAnbWFsZScgdGhlbiBIQy4iTWFsZSIKICAgICAgICB3aGVuIFBhdGllbnQuZ2VuZGVyID0gJ2ZlbWFsZScgdGhlbiBIQy4iRmVtYWxlIgogICAgICAgIHdoZW4gUGF0aWVudC5nZW5kZXIgPSAndHJhbnNnZW5kZXIgZmVtYWxlJyB0aGVuIEhDLiJUcmFuc2dlbmRlciBmZW1hbGUiCiAgICAgICAgd2hlbiBQYXRpZW50LmdlbmRlciA9ICd0cmFuc2dlbmRlciBtYWxlJyB0aGVuIEhDLiJUcmFuc2dlbmRlciBtYWxlIgogICAgICAgIGVsc2UgSEMuIk90aGVyIC0gSElWLkEuREUyMyIKICAgIGVuZAoKZGVmaW5lICJISVYgU3RhdHVzIjoKICAgIGNhc2UgCiAgICAgICAgd2hlbiBleGlzdHMoIkhJViBQb3NpdGl2ZSBDb25kaXRpb24iIEMgd2hlcmUgQy5vbnNldCBiZWZvcmUgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKSB0aGVuIEhDLiJISVYtcG9zaXRpdmUgLSBISVYuQi5ERTExNiIKICAgICAgICB3aGVuIG5vdCBleGlzdHMoIkhJViBQb3NpdGl2ZSBDb25kaXRpb24iIEMgd2hlcmUgQy5vbnNldCBiZWZvcmUgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKSBhbmQgZXhpc3RzKCJISVYgTmVnYXRpdmUgT2JzZXJ2YXRpb24iIE8gd2hlcmUgTy5pc3N1ZWQgYmVmb3JlIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgdGhlbiAgSEMuIkhJVi1uZWdhdGl2ZSAtIEhJVi5CLkRFMTE3IgogICAgICAgIGVsc2UgSEMuIlVua25vd24gLSBISVYuQi5ERTExOCIKICAgIGVuZAoKLyoKICogS2V5IHBvcHVsYXRpb25zIChtZW4gd2hvIGhhdmUgc2V4IHdpdGggbWVuLCBwZW9wbGUgbGl2aW5nIGluIHByaXNvbnMgYW5kIG90aGVyIGNsb3NlZCBzZXR0aW5ncywgcGVvcGxlIHdobyBpbmplY3QgZHJ1Z3MsIHNleCB3b3JrZXJzLCB0cmFucyBhbmQgZ2VuZGVyIGRpdmVyc2UgcGVvcGxlKQogKi8KCiBkZWZpbmUgU1c6CiAgZXhpc3RzICgKICAgIFtPYnNlcnZhdGlvbjogSEMuIktleSBwb3B1bGF0aW9uIG1lbWJlciogLSBISVYuRS5ERTExMyJdIE8KICAgIHdoZXJlIE8uc3RhdHVzIGluIHsgJ2ZpbmFsJywgJ2FtZW5kZWQnLCAnY29ycmVjdGVkJyB9CiAgICBhbmQgZXhpc3RzKE8uY2F0ZWdvcnkgT0Mgd2hlcmUgT0MgfiBIQ0MuInNvY2lhbC1oaXN0b3J5IikKICAgIGFuZCBPLnZhbHVlIH4gSEMuIlNleCB3b3JrZXIgLSBISVYuQi5ERTUxIgogICkKCiBkZWZpbmUgTVNNOgogIGV4aXN0cyAoCiAgICBbT2JzZXJ2YXRpb246IEhDLiJLZXkgcG9wdWxhdGlvbiBtZW1iZXIqIC0gSElWLkUuREUxMTMiXSBPCiAgICB3aGVyZSBPLnN0YXR1cyBpbiB7ICdmaW5hbCcsICdhbWVuZGVkJywgJ2NvcnJlY3RlZCcgfQogICAgYW5kIGV4aXN0cyhPLmNhdGVnb3J5IE9DIHdoZXJlIE9DIH4gSENDLiJzb2NpYWwtaGlzdG9yeSIpCiAgICBhbmQgTy52YWx1ZSB+IEhDLiJNZW4gd2hvIGhhdmUgc2V4IHdpdGggbWVuIgogICkKCiAgZGVmaW5lIFRyYW5zOgogIGV4aXN0cyAoCiAgICBbT2JzZXJ2YXRpb246IEhDLiJLZXkgcG9wdWxhdGlvbiBtZW1iZXIqIC0gSElWLkUuREUxMTMiXSBPCiAgICB3aGVyZSBPLnN0YXR1cyBpbiB7ICdmaW5hbCcsICdhbWVuZGVkJywgJ2NvcnJlY3RlZCcgfQogICAgYW5kIGV4aXN0cyhPLmNhdGVnb3J5IE9DIHdoZXJlIE9DIH4gSENDLiJzb2NpYWwtaGlzdG9yeSIpCiAgICBhbmQgTy52YWx1ZSB+IEhDLiJUcmFucyBhbmQgZ2VuZGVyLWRpdmVyc2UgcGVvcGxlIC0gSElWLkIuREU1MyIKICApCgogIGRlZmluZSBQV0lEOgogIGV4aXN0cyAoCiAgICBbT2JzZXJ2YXRpb246IEhDLiJLZXkgcG9wdWxhdGlvbiBtZW1iZXIqIC0gSElWLkUuREUxMTMiXSBPCiAgICB3aGVyZSBPLnN0YXR1cyBpbiB7ICdmaW5hbCcsICdhbWVuZGVkJywgJ2NvcnJlY3RlZCcgfQogICAgYW5kIGV4aXN0cyhPLmNhdGVnb3J5IE9DIHdoZXJlIE9DIH4gSENDLiJzb2NpYWwtaGlzdG9yeSIpCiAgICBhbmQgTy52YWx1ZSB+IEhDLiJQZW9wbGUgd2hvIGluamVjdCBkcnVncyAtIEhJVi5CLkRFNTQiCiAgKQoKICBkZWZpbmUgUHJpc29uZXI6CiAgZXhpc3RzICgKICAgIFtPYnNlcnZhdGlvbjogSEMuIktleSBwb3B1bGF0aW9uIG1lbWJlciogLSBISVYuRS5ERTExMyJdIE8KICAgIHdoZXJlIE8uc3RhdHVzIGluIHsgJ2ZpbmFsJywgJ2FtZW5kZWQnLCAnY29ycmVjdGVkJyB9CiAgICBhbmQgZXhpc3RzKE8uY2F0ZWdvcnkgT0Mgd2hlcmUgT0MgfiBIQ0MuInNvY2lhbC1oaXN0b3J5IikKICAgIGFuZCBPLnZhbHVlIH4gSEMuIlBlb3BsZSBsaXZpbmcgaW4gcHJpc29ucyBhbmQgb3RoZXIgY2xvc2VkIHNldHRpbmdzIgogICkKCiAgZGVmaW5lIFRCX2RpYWdub3NlZDoKICBleGlzdHMoCiAgICAoW0NvbmRpdGlvbl0gQwogICAgd2hlcmUgQy5jbGluaWNhbFN0YXR1cyB+IEhDQy4iYWN0aXZlIgogICAgYW5kIGV4aXN0cyhDLmNhdGVnb3J5IENDIHdoZXJlIENDIH4gSENDLiJlbmNvdW50ZXItZGlhZ25vc2lzIikKICAgIGFuZCBDLmNvZGUgfiBIQy4iRGlhZ25vc2VkIFRCIgogICAgYW5kIEMub25zZXQgZHVyaW5nICJNZWFzdXJlbWVudCBQZXJpb2QiKQogICkKICAKICBkZWZpbmUgVEJfcHJlc3VtcHRpdmU6CiAgZXhpc3RzKAogICAgKFtDb25kaXRpb25dIEMKICAgIHdoZXJlIEMuY2xpbmljYWxTdGF0dXMgfiBIQ0MuImFjdGl2ZSIKICAgIGFuZCBleGlzdHMoQy5jYXRlZ29yeSBDQyB3aGVyZSBDQyB+IEhDQy4iZW5jb3VudGVyLWRpYWdub3NpcyIpCiAgICBhbmQgQy5jb2RlIH4gSEMuIlByZXN1bXB0aXZlIFRCIC0gSElWLkQuREU5NDUiCiAgICBhbmQgQy5vbnNldCBkdXJpbmcgIk1lYXN1cmVtZW50IFBlcmlvZCIpCiAgKQoKCmRlZmluZSBFeHBvc3VyZV9PY2N1cGF0aW9uYWw6CiAgZXhpc3RzICgKICAgIFtPYnNlcnZhdGlvbjogSEMuIkhJViBleHBvc3VyZSB0eXBlKiJdIE8KICAgIHdoZXJlIE8uc3RhdHVzIGluIHsgJ2ZpbmFsJywgJ2FtZW5kZWQnLCAnY29ycmVjdGVkJyB9CiAgICBhbmQgZXhpc3RzKE8uY2F0ZWdvcnkgT0Mgd2hlcmUgT0MgfiBIQ0MuInNvY2lhbC1oaXN0b3J5IikKICAgIGFuZCBPLnZhbHVlIH4gSEMuIk9jY3VwYXRpb25hbCIKICApCgpkZWZpbmUgRXhwb3N1cmVfTm9uX09jY3VwYXRpb25hbF92aW9sZW50OgogIGV4aXN0cyAoCiAgICBbT2JzZXJ2YXRpb246IEhDLiJISVYgZXhwb3N1cmUgdHlwZSoiXSBPCiAgICB3aGVyZSBPLnN0YXR1cyBpbiB7ICdmaW5hbCcsICdhbWVuZGVkJywgJ2NvcnJlY3RlZCcgfQogICAgYW5kIGV4aXN0cyhPLmNhdGVnb3J5IE9DIHdoZXJlIE9DIH4gSENDLiJzb2NpYWwtaGlzdG9yeSIpCiAgICBhbmQgTy52YWx1ZSB+IEhDLiJOb24tb2NjdXBhdGlvbmFsIHZpb2xlbnQiCiAgKQoKZGVmaW5lIEV4cG9zdXJlX05vbl9PY2N1cGF0aW9uYWxfY29uc2Vuc3VhbF9zZXg6CiAgZXhpc3RzICgKICAgIFtPYnNlcnZhdGlvbjogSEMuIkhJViBleHBvc3VyZSB0eXBlKiJdIE8KICAgIHdoZXJlIE8uc3RhdHVzIGluIHsgJ2ZpbmFsJywgJ2FtZW5kZWQnLCAnY29ycmVjdGVkJyB9CiAgICBhbmQgZXhpc3RzKE8uY2F0ZWdvcnkgT0Mgd2hlcmUgT0MgfiBIQ0MuInNvY2lhbC1oaXN0b3J5IikKICAgIGFuZCBPLnZhbHVlIH4gSEMuIk5vbi1vY2N1cGF0aW9uYWwgY29uc2Vuc3VhbCBzZXgiCiAgKQoKZGVmaW5lIGhpdl9leHBvc3VyZV90eXBlOgogIExpc3Q8U3RyaW5nPnsKICAgIGlmIEV4cG9zdXJlX09jY3VwYXRpb25hbCB0aGVuICdPY2N1cGF0aW9uYWwnIGVsc2UgbnVsbCwKICAgIGlmIEV4cG9zdXJlX05vbl9PY2N1cGF0aW9uYWxfdmlvbGVudCB0aGVuICdOb24tb2NjdXBhdGlvbmFsIHZpb2xlbnQnIGVsc2UgbnVsbCwKICAgIGlmIEV4cG9zdXJlX05vbl9PY2N1cGF0aW9uYWxfY29uc2Vuc3VhbF9zZXggdGhlbiAnTm9uLW9jY3VwYXRpb25hbCBjb25zZW5zdWFsIHNleCcgZWxzZSBudWxsCiAgfQoKLypAdHJpZ2dlcmVkQnkgRW5jb3VudGVyIHdpdGggbG9jYXRpb24gPSBjb21tdW5pdHkgbGV2ZWwgdGVzdGluZyovCgpkZWZpbmUgIkNvbW11bml0eV90ZXN0aW5nIjoKICBleGlzdHMoW09ic2VydmF0aW9uXSBPCiAgICB3aXRoIFtFbmNvdW50ZXJdIEUKICAgICAgc3VjaCB0aGF0IE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRSkgYW5kIGV4aXN0cyhFLmxvY2F0aW9uLnBoeXNpY2FsVHlwZSBQVCB3aGVyZSBQVCB+ICBIQy4iQ29tbXVuaXR5LWxldmVsIHRlc3RpbmciKSAKICB3aGVyZSAoTy5zdGF0dXMgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcgfQogIGFuZCBPLmNvZGUgfiBIQy4iUmFwaWQgZGlhZ25vc3RpYyB0ZXN0IGZvciBISVYgLSBISVYuQi5ERTgyIgogIGFuZCBPLmlzc3VlZCBkdXJpbmcgIk1lYXN1cmVtZW50IFBlcmlvZCIpCiAgKQoKLypAdHJpZ2dlcmVkQnkgRW5jb3VudGVyIHdpdGggbG9jYXRpb24gPSBmYWNpbGl0eSBsZXZlbCB0ZXN0aW5nKi8KZGVmaW5lICJGYWNpbGl0eV90ZXN0aW5nIjoKICBleGlzdHMoW09ic2VydmF0aW9uXSBPCiAgICB3aXRoIFtFbmNvdW50ZXJdIEUKICAgICAgc3VjaCB0aGF0IE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRSkgYW5kIGV4aXN0cyhFLmxvY2F0aW9uLnBoeXNpY2FsVHlwZSBQVCB3aGVyZSBQVCB+ICBIQy4iRmFjaWxpdHktbGV2ZWwgdGVzdGluZyIpCiAgd2hlcmUgKE8uc3RhdHVzIGluIHsgJ2ZpbmFsJywgJ2FtZW5kZWQnIH0KICBhbmQgTy5jb2RlIH4gSEMuIlJhcGlkIGRpYWdub3N0aWMgdGVzdCBmb3IgSElWIC0gSElWLkIuREU4MiIKICBhbmQgTy5pc3N1ZWQgZHVyaW5nICJNZWFzdXJlbWVudCBQZXJpb2QiKQogICkKCi8vbGlmdGVkIHRoaXMgZnJvbSBBTkMgREFLCmRlZmluZSAiQU5DX2Nhc2UiOgpleGlzdHMoCiAgICBbRXBpc29kZU9mQ2FyZV0gRU9DCiAgICB3aGVyZSBleGlzdHMoRU9DLnR5cGUgVCB3aGVyZSBUIH4gSEMuIkFscmVhZHkgb24gQVJUIGF0IGZpcnN0IGFudGVuYXRhbCBjYXJlIHZpc2l0IikKICAgIGFuZCAoZXhpc3RzICgKICAgICAgRU9DLnN0YXR1c0hpc3RvcnkgSAogICAgICB3aGVyZSBILnBlcmlvZCBvdmVybGFwcyAiTWVhc3VyZW1lbnQgUGVyaW9kIgogICAgKSAKICAgIG9yICgKICAgICAgRU9DLnBlcmlvZCBvdmVybGFwcyAiTWVhc3VyZW1lbnQgUGVyaW9kIgogICAgKQogICAgKQogICAgKQogIAoKICBkZWZpbmUgIlBSRVAgUHJvZHVjdCBPcmFsIjoKICBleGlzdHMoW01lZGljYXRpb25TdGF0ZW1lbnRdIE1TCiAgICB3aGVyZSBNUy5zdGF0dXMgPSAnY29tcGxldGVkJwogICAgYW5kIGV4aXN0cyhNUy5yZWFzb25Db2RlIEMgd2hlcmUgQyB+IEhDLiJDdXJyZW50bHkgb24gUHJFUCIpCiAgICBhbmQgKE1TLm1lZGljYXRpb24gfiBIQy4iVERGICsgRlRDIC0gSElWLkMuREUxOCIgb3IKICAgIE1TLm1lZGljYXRpb24gfiBIQy4iVERGIC0gSElWLkMuREUxOSIgb3IKICAgIE1TLm1lZGljYXRpb24gfiBIQy4iVERGICsgM1RDIC0gSElWLkMuREUyMCIgb3IKICAgIE1TLm1lZGljYXRpb24gfiBIQy4iT3RoZXIgVERGLWJhc2VkIHJlZ2ltZW4iKQogICkKCiAgZGVmaW5lICJQUkVQIFByb2R1Y3QgbG9uZy1hY3RpbmcgZGV2aWNlIjoKICBleGlzdHMoW01lZGljYXRpb25TdGF0ZW1lbnRdIE1TCiAgICB3aGVyZSBNUy5zdGF0dXMgPSAnY29tcGxldGVkJwogICAgYW5kIGV4aXN0cyhNUy5yZWFzb25Db2RlIEMgd2hlcmUgQyB+IEhDLiJDdXJyZW50bHkgb24gUHJFUCIpCiAgICBhbmQgTVMubWVkaWNhdGlvbiB+IEhDLiJEYXBpdmlyaW5lIHZhZ2luYWwgcmluZyBEVlIgLSBISVYuQy5ERTIyIgogICkKCiAgZGVmaW5lICJQUkVQIFByb2R1Y3QgbG9uZy1hY3RpbmcgaW5qZWN0YWJsZSI6CiAgZXhpc3RzKFtNZWRpY2F0aW9uU3RhdGVtZW50XSBNUwogICAgd2hlcmUgTVMuc3RhdHVzID0gJ2NvbXBsZXRlZCcKICAgIGFuZCBleGlzdHMoTVMucmVhc29uQ29kZSBDIHdoZXJlIEMgfiBIQy4iQ3VycmVudGx5IG9uIFByRVAiKQogICAgYW5kIE1TLm1lZGljYXRpb24gfiBIQy4iQ0FCLUxBIC0gSElWLkMuREUyMyIKICApCiAgCiAgZGVmaW5lICJQUkVQIGZpcnN0IHRpbWUiOgogIGV4aXN0cyhbTWVkaWNhdGlvblN0YXRlbWVudF0gTVMKICAgIHdoZXJlIE1TLnN0YXR1cyA9ICdjb21wbGV0ZWQnCiAgICBhbmQgZXhpc3RzKE1TLnJlYXNvbkNvZGUgQyB3aGVyZSBDIH4gSEMuIkN1cnJlbnRseSBvbiBQckVQIikKICAgIGFuZCBleGlzdHMoTVMuc3RhdHVzUmVhc29uIFNSIHdoZXJlIFNSIH4gSEMuIkZpcnN0LXRpbWUgdXNlciAtIEhJVi5DLkRFMjUiKQogICkKCiAgZGVmaW5lICJQUkVQIENvbnRpbnVpbmcgdXNlciI6CiAgZXhpc3RzKFtNZWRpY2F0aW9uU3RhdGVtZW50XSBNUwogICAgd2hlcmUgTVMuc3RhdHVzID0gJ2NvbXBsZXRlZCcKICAgIGFuZCBleGlzdHMoTVMucmVhc29uQ29kZSBDIHdoZXJlIEMgfiBIQy4iQ3VycmVudGx5IG9uIFByRVAiKQogICAgYW5kIGV4aXN0cyhNUy5zdGF0dXNSZWFzb24gU1Igd2hlcmUgU1IgfiBIQy4iQ29udGludWluZyB1c2VyIikKICApCiAgCiAgZGVmaW5lICJQUkVQIFJlc3RhcnRpbmciOgogIGV4aXN0cyhbTWVkaWNhdGlvblN0YXRlbWVudF0gTVMKICAgIHdoZXJlIE1TLnN0YXR1cyA9ICdjb21wbGV0ZWQnCiAgICBhbmQgZXhpc3RzKE1TLnJlYXNvbkNvZGUgQyB3aGVyZSBDIH4gSEMuIkN1cnJlbnRseSBvbiBQckVQIikKICAgIGFuZCBleGlzdHMoTVMuc3RhdHVzUmVhc29uIFNSIHdoZXJlIFNSIH4gSEMuIlJlc3RhcnRpbmcgZm9sbG93aW5nIGEgcGVyaW9kIG9mIG5vdCB0YWtpbmcgUHJFUCIpCiAgKQoKICBkZWZpbmUgIkRhaWx5X29yYWxfUHJFUCI6CiAgZXhpc3RzKFtNZWRpY2F0aW9uU3RhdGVtZW50XSBNUwogICAgd2hlcmUgTVMuc3RhdHVzID0gJ2NvbXBsZXRlZCcKICAgIGFuZCBleGlzdHMoTVMucmVhc29uQ29kZSBDIHdoZXJlIEMgfiBIQy4iQ3VycmVudGx5IG9uIFByRVAiKQogICAgYW5kIGV4aXN0cyhNUy5kb3NhZ2UuYWRkaXRpb25hbEluc3RydWN0aW9uIEFJIHdoZXJlIEFJIH4gSEMuIkRhaWx5IG9yYWwgUHJFUCIpCiAgKQoKICBkZWZpbmUgIkV2ZW50X2RyaXZlbl9QckVQIjoKICBleGlzdHMoW01lZGljYXRpb25TdGF0ZW1lbnRdIE1TCiAgICB3aGVyZSBNUy5zdGF0dXMgPSAnY29tcGxldGVkJwogICAgYW5kIGV4aXN0cyhNUy5yZWFzb25Db2RlIEMgd2hlcmUgQyB+IEhDLiJDdXJyZW50bHkgb24gUHJFUCIpCiAgICBhbmQgZXhpc3RzKE1TLmRvc2FnZS5hZGRpdGlvbmFsSW5zdHJ1Y3Rpb24gQUkgd2hlcmUgQUkgfiBIQy4iRXZlbnQtZHJpdmVuIFByRVAgMisxKzEiKSAKICApCgogIGRlZmluZSAib3RoZXJfZG9zaW5nX1ByRVAiOgogIGV4aXN0cyhbTWVkaWNhdGlvblN0YXRlbWVudF0gTVMKICAgIHdoZXJlIE1TLnN0YXR1cyA9ICdjb21wbGV0ZWQnCiAgICBhbmQgZXhpc3RzKE1TLnJlYXNvbkNvZGUgQyB3aGVyZSBDIH4gSEMuIkN1cnJlbnRseSBvbiBQckVQIikKICAgIGFuZCBleGlzdHMoTVMuZG9zYWdlLmFkZGl0aW9uYWxJbnN0cnVjdGlvbiBBSSB3aGVyZSBBSSB+IEhDLiJPdGhlciBQckVQIGRvc2luZyB0eXBlIikgCiAgKQoKCiAgZGVmaW5lIHBhdGllbnRHcm91cHM6CiAgTGlzdDxTdHJpbmc+ewogICAgaWYgU1cgdGhlbiAnU1cnIGVsc2UgbnVsbCwKICAgIGlmIE1TTSB0aGVuICdNU00nIGVsc2UgbnVsbCwKICAgIGlmIFRyYW5zIHRoZW4gJ1RyYW5zJyBlbHNlIG51bGwsCiAgICBpZiBQV0lEIHRoZW4gJ1BXSUQnIGVsc2UgbnVsbCwKICAgIGlmIFByaXNvbmVyIHRoZW4gJ1ByaXNvbmVyJyBlbHNlIG51bGwKICB9CgogIGRlZmluZSBzZXR0aW5nOgogIExpc3Q8U3RyaW5nPnsKICAgIGlmIENvbW11bml0eV90ZXN0aW5nIHRoZW4gJ0NvbW11bml0eS1sZXZlbCB0ZXN0aW5nJyBlbHNlIG51bGwsCiAgICBpZiBGYWNpbGl0eV90ZXN0aW5nIHRoZW4gJ0ZhY2lsaXR5LWxldmVsIHRlc3RpbmcnIGVsc2UgbnVsbAogIH0KCiAgZGVmaW5lIGFuYzoKICBMaXN0PFN0cmluZz57CiAgICBpZiBBTkNfY2FzZSB0aGVuICdBTkMgY2FzZScgZWxzZSBudWxsCiAgfQoKICBkZWZpbmUgdGI6CiAgTGlzdDxTdHJpbmc+ewogICAgaWYgVEJfZGlhZ25vc2VkIHRoZW4gJ0RpYWdub3NlZCBUQicgZWxzZSBudWxsLAogICAgaWYgVEJfcHJlc3VtcHRpdmUgdGhlbiAnUHJlc3VtcHRpdmUgVEInIGVsc2UgbnVsbAogIH0KCiAgZGVmaW5lIHByZXBfcHJvZHVjdDoKICBMaXN0PFN0cmluZz57CiAgICBpZiBgUFJFUCBQcm9kdWN0IE9yYWxgIHRoZW4gJ1BSRVAgUHJvZHVjdCBPcmFsJyBlbHNlIG51bGwsCiAgICBpZiBgUFJFUCBQcm9kdWN0IGxvbmctYWN0aW5nIGRldmljZWAgdGhlbiAnUFJFUCBQcm9kdWN0IGxvbmctYWN0aW5nIGRldmljZScgZWxzZSBudWxsLAogICAgaWYgYFBSRVAgUHJvZHVjdCBsb25nLWFjdGluZyBpbmplY3RhYmxlYCB0aGVuICdQUkVQIFByb2R1Y3QgbG9uZy1hY3RpbmcgaW5qZWN0YWJsZScgZWxzZSBudWxsCiAgfQoKICBkZWZpbmUgcHJlcF9leHBlcmllbmNlOgogIExpc3Q8U3RyaW5nPnsKICAgIGlmIGBQUkVQIGZpcnN0IHRpbWVgIHRoZW4gJ1BSRVAgZmlyc3QgdGltZScgZWxzZSBudWxsLAogICAgaWYgYFBSRVAgQ29udGludWluZyB1c2VyYCB0aGVuICdQUkVQIENvbnRpbnVpbmcgdXNlcicgZWxzZSBudWxsLAogICAgaWYgYFBSRVAgUmVzdGFydGluZ2AgdGhlbiAnUFJFUCBSZXN0YXJ0aW5nJyBlbHNlIG51bGwKICB9CgogIGRlZmluZSBwcmVwX2Rvc2luZzoKICBMaXN0PFN0cmluZz57CiAgICBpZiBgRGFpbHlfb3JhbF9QckVQYCB0aGVuICdEYWlseSBvcmFsIFByRVAnIGVsc2UgbnVsbCwKICAgIGlmIGBFdmVudF9kcml2ZW5fUHJFUGAgdGhlbiAnRXZlbnQgZHJpdmVuIFByRVAnIGVsc2UgbnVsbCwKICAgIGlmIGBvdGhlcl9kb3NpbmdfUHJFUGAgdGhlbiAnT3RoZXIgUHJFUCBkb3NpbmcgdHlwZScgZWxzZSBudWxsCiAgfQoKLy9uZWVkIHRvIGFkZCBUaW1lIHRvIHN0YXJ0IEFSVCAod2l0aGluIDcsIDMwIG9yIDkwIGRheXMgb2YgZGlhZ25vc2lzLCBhcyBwZXIgY291bnRyeSBndWlkZWxpbmVzKQovL25lZWQgdG8gYWRkIERpc2FnZ3JlZ2F0aW9uIGJ5IHRpbWUgc2luY2UgZGlhZ25vc2lzCiAgCgoKLyogCiogREFLIGhhcyBjb2RlcyBmb3IgSEFBUlQgbWlzc3BlY2lmaWVkIAoqIElDRC0xMCBaOTIuMglPdGhlciBwcm9waHlsYWN0aWMgY2hlbW90aGVyYXB5CQkKKiBMT0lOQyAiNTQ4MjUtNQkiCU9uIHNjaGVkdWxlZCBwYWluIG1lZGljYXRpb24gcmVnaW1lbiBpbiBsYXN0IDcgZGF5cwoqCiogU2hvdWxkIGRpc2N1c3MgCiovCgoKCgoKCgovKgoqIEtlbnlhIEVNUiBkZWZpbmVkIGFzIEhJViBwb3NpdGl2ZSBjb25kaXRpb24KKiBXaWxsIG5lZWQgdG8gZGlzY3VzcyBpZiBwcm9kdWNlIGZsYWdzIHRocm91Z2ggY29uZGl0aW9ucyBmb3IgY29uY2VwdHMgdG8gdXNlIGluIGluZGljYXRvciBjYWxjdWxhdGlvbiBzdWNoIGFzIEhJViBwb3NpdGl2ZSBhbmQgT24gQVJUCiogSG93ZXZlciwgd2UgaGF2ZSBtb3ZlZCBmb3J3YXJkIHdpdGggYSBtb3JlIHByZXNjcmlwdGl2ZSBhcHByb2FjaCAKKiBJbmV2aXRhYmx5IG91ciBhcHByb2FjaCByZXF1aXJlcyB0aGF0IGNlcnRhaW4gZGF0YSBlbGVtZW50cyBiZSBhdmFpbGFibGUKKi8KCi8qCiAqIEhJViBUcmVhdG1lbnQgZHVyaW5nIHRoZSBtZWFzdXJlbWVudCBwZXJpb2QKICogdXNlcyBkb3NhZ2UgYW5kIGRpc3BlbnNhdGlvbiBhbW91bnQgdG8gZXN0aW1hdGUgbGFzdCBkYXkgb2YgbWVkaWNhdGlvbgogKiBtZWRpY2F0aW9uIHNob3VsZCBiZSBkaXNwZW5zZWQgYmVmb3JlIGVuZCBvZiBtZWFzdXJlbWVudCBwZXJpb2QKICogbWVkaWNhdGlvbiBzaG91bGQgbGFzdCB1bnRpbCBhZnRlciAyOCBkYXlzIGFmdGVyIHRoZSBlbmQgb2YgdGhlIG1lYXN1cmVtZW50IHBlcmlvZAogKiBUaGlzIHRha2VzIGludG8gYWNjb3VudCBsb3N0IHRvIGZvbGxvdyB1cAogKi8KCi8qCipkZWZpbmUgIkhJViBUcmVhdG1lbnQgZHVyaW5nIHRoZSBtZWFzdXJlbWVudCBwZXJpb2QiOgoqICAgW01lZGljYXRpb25EaXNwZW5zZV0gTUQKKiAgICB3aGVyZSBNRC5zdGF0dXMgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcsICdjb3JyZWN0ZWQnIH0KKiAgICBhbmQgTUQubWVkaWNhdGlvbiB+ICdBbnRpcmV0cm92aXJhbCcKKiAgICBhbmQgTUQud2hlbkhhbmRlZE92ZXIgYmVmb3JlIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIgoqICAgIGFuZCAoTUQud2hlbkhhbmRlZE92ZXIgKyBNRC5kb3NhZ2VJbnN0cnVjdGlvblswXS50aW1pbmcucmVwZWF0LmR1cmF0aW9uLnZhbHVlICogTWVkaWNhdGlvbkRpc3BlbnNlLnF1YW50aXR5LnZhbHVlKSBhZnRlciAobWVhc3VyZW1lbnRQZXJpb2QuZW5kIC0gMjggZGF5cykKKi8gCgovKgoqIEltbXVuaXphdGlvbiBkZWZpbmVzIEhBQVJUIGFzCiogIGV4aXN0cyhbTWVkaWNhdGlvbkFkbWluaXN0cmF0aW9uXSBBIHdoZXJlIEV4dHJhY3RNZWRpY2F0aW9uQ29kZShBLm1lZGljYXRpb24pIGluIElNTVpjLiJBUlYgRHJ1Z3MiIGFuZCBBLnN0YXR1cyA9ICdpbi1wcm9ncmVzcycpCiogSSBiZWxpZXZlIHRoaXMgaXMgdGhlIGluY29ycmVjdCByZXNvdXJjZSB1bmxlc3MgdGhleSBtZWFuIHRvIHNheSB0aGF0IG1lZGljYXRpb24gaXMgZ2l2ZW4gZHVyaW5nIGEgbWVkaWNhbCBlbmNvdW50ZXIKKiB3b3VsZCBsaWtlIHRvIGRpc2N1c3MgCiovIAoKLyoqIAogKiBQYXRpZW50IERlY2Vhc2VkIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QKICogSW1tdW5pemF0aW9uIGRlZmluZXMgdGhpcyBhcyB0cnVlIHdoZW4gaXMgYSBib29sZWFuLiBUaGlzIG1heSBoYXZlIHRoZSBlZmZlY3Qgb2YgZGVsZXRpbmcgYSBwZXJzb24gZnJvbSBpbmRpY2F0b3JzIGluIGFsbCBjYWxjdWxhdGlvbnMKICogU2hvdWxkIGludGVuZCB0byB1c2Ugd2hlbiBwYXRpZW50LmRlY2Vhc2VkIEZISVIgYm9vbGVhbiB3YXMgdXBkYXRlZCB0byBUUlVFIGlmIG5vIG90aGVyIGRhdGUgaXMgYXZhaWxhYmxlCiAqIEtlbnlhIEVNUiBleGFtcGxlIGRvZXMgbm90IGFjY291bnQgZm9yIHdoZW4gZGVjZWFzZWQgaXMganVzdCBhIGJvb2xlYW4KICovCgoKLyoKZGVmaW5lICJQUkVQIFByZXNjcmlwdGlvbiBEYXlzIjoKICBTdW0oCiAgICAoCiAgICAgIGNvbGxhcHNlICgKICAgICAgICBbTWVkaWNhdGlvblJlcXVlc3RdIE1SCiAgICAgICAgICB3aGVyZSBNUi5zdGF0dXMgPSAnY29tcGxldGVkJwogICAgICAgICAgYW5kIE1SLmludGVudCA9ICdvcmRlcicKICAgICAgICAgIGFuZCBNUi5tZWRpY2F0aW9uIH4gSEMuIlByRVAgZm9yIEhJViBwcmV2ZW50aW9uIgogICAgICAgIHJldHVybiBXQ29tVjIuIlByZXNjcmlwdGlvbiBSZWxldmFudCBQZXJpb2QiKCBNUiApIGludGVyc2VjdCAiTWVhc3VyZW1lbnQgUGVyaW9kIgogICAgICApCiAgICApIFBSRVBVc2VJbnRlcnZhbAogICAgICByZXR1cm4gZGF5cyBiZXR3ZWVuIHN0YXJ0IG9mIFBSRVBVc2VJbnRlcnZhbCBhbmQgZW5kIG9mIFBSRVBVc2VJbnRlcnZhbAogICkKKi8KCgpkZWZpbmUgZnVuY3Rpb24gR2V0RHVyYXRpb25JbkRheXModmFsdWUgRkhJUi5EdXJhdGlvbik6IC8vIHJldHVybnMgRGVjaW1hbDoKICAgIGNhc2UgdmFsdWUuY29kZS52YWx1ZQogICAgICB3aGVuICdhJyB0aGVuIHZhbHVlLnZhbHVlICogMzY1LjAKICAgICAgd2hlbiAnbW8nIHRoZW4gdmFsdWUudmFsdWUudmFsdWUgKiAzMC4wCiAgICAgIHdoZW4gJ3drJyB0aGVuIHZhbHVlLnZhbHVlLnZhbHVlICogNy4wCiAgICAgIHdoZW4gJ2QnIHRoZW4gdmFsdWUudmFsdWUudmFsdWUKICAgICAgd2hlbiAnaCcgdGhlbiB2YWx1ZS52YWx1ZS52YWx1ZSAvIDI0LjAKICAgICAgd2hlbiAnbWluJyB0aGVuIHZhbHVlLnZhbHVlLnZhbHVlIC8gNjAuMCAvIDI0LjAKICAgICAgd2hlbiAncycgdGhlbiB2YWx1ZS52YWx1ZS52YWx1ZSAvIDYwLjAgLyA2MC4wIC8gMjQuMAogICAgICB3aGVuICdtcycgdGhlbiB2YWx1ZS52YWx1ZS52YWx1ZSAvIDYwLjAgLyA2MC4wIC8gMjQuMCAvIDEwMDAuMAogICAgICBlbHNlIE1lc3NhZ2UoMTAwMCwgdHJ1ZSwgJ1VuZGVmaW5lZCcsICdFcnJvcicsICdVbnN1cHBvcnRlZCBkdXJhdGlvbiB1bml0ICcgKyB2YWx1ZS5jb2RlLnZhbHVlKQogICAgZW5kCgpkZWZpbmUgZnVuY3Rpb24gIlByZXNjcmlwdGlvbiBSZWxldmFudCBQZXJpb2QiKHByZXNjcmlwdGlvbiBGSElSLk1lZGljYXRpb25SZXF1ZXN0KToKICBpZiAoCiAgICBwcmVzY3JpcHRpb24uYXV0aG9yZWRPbiBpcyBub3QgbnVsbCBhbmQgcHJlc2NyaXB0aW9uLmRpc3BlbnNlUmVxdWVzdCBpcyBub3QgbnVsbAogICAgICBhbmQgcHJlc2NyaXB0aW9uLmRpc3BlbnNlUmVxdWVzdC5leHBlY3RlZFN1cHBseUR1cmF0aW9uIGlzIG5vdCBudWxsCiAgKQogIHRoZW4gSW50ZXJ2YWxbCiAgICBkYXRlIGZyb20gcHJlc2NyaXB0aW9uLmF1dGhvcmVkT24sCiAgICBkYXRlIGZyb20gcHJlc2NyaXB0aW9uLmF1dGhvcmVkT24gKyBTeXN0ZW0uUXVhbnRpdHl7IHZhbHVlOiBHZXREdXJhdGlvbkluRGF5cyhwcmVzY3JpcHRpb24uZGlzcGVuc2VSZXF1ZXN0LmV4cGVjdGVkU3VwcGx5RHVyYXRpb24pLCB1bml0OiAnZGF5cycgfQogIF0KICBlbHNlIG51bGwKCi8vU3lzdGVtLkludGVnZXIKZGVmaW5lIGZ1bmN0aW9uIFRvRGFpbHkoZnJlcXVlbmN5IFN5c3RlbS5JbnRlZ2VyLCBwZXJpb2QgU3lzdGVtLlF1YW50aXR5KToKICBjYXNlIHBlcmlvZC51bml0CiAgICB3aGVuICdoJyB0aGVuIGZyZXF1ZW5jeSAqICgyNC4wIC8gcGVyaW9kLnZhbHVlKQogICAgd2hlbiAnbWluJyB0aGVuIGZyZXF1ZW5jeSAqICgyNC4wIC8gcGVyaW9kLnZhbHVlKSAqIDYwCiAgICB3aGVuICdzJyB0aGVuIGZyZXF1ZW5jeSAqICgyNC4wIC8gcGVyaW9kLnZhbHVlKSAqIDYwICogNjAKICAgIHdoZW4gJ2QnIHRoZW4gZnJlcXVlbmN5ICogKDI0LjAgLyBwZXJpb2QudmFsdWUpIC8gMjQKICAgIHdoZW4gJ3drJyB0aGVuIGZyZXF1ZW5jeSAqICgyNC4wIC8gcGVyaW9kLnZhbHVlKSAvICgyNCAqIDcpCiAgICB3aGVuICdtbycgdGhlbiBmcmVxdWVuY3kgKiAoMjQuMCAvIHBlcmlvZC52YWx1ZSkgLyAoMjQgKiAzMCkgLyogYXNzdW1pbmcgMzAgZGF5cyBpbiBtb250aCAqLwogICAgd2hlbiAnYScgdGhlbiBmcmVxdWVuY3kgKiAoMjQuMCAvIHBlcmlvZC52YWx1ZSkgLyAoMjQgKiAzNjUpIC8qIGFzc3VtaW5nIDM2NSBkYXlzIGluIHllYXIgKi8KICAgIHdoZW4gJ2hvdXInIHRoZW4gZnJlcXVlbmN5ICogKDI0LjAgLyBwZXJpb2QudmFsdWUpCiAgICB3aGVuICdtaW51dGUnIHRoZW4gZnJlcXVlbmN5ICogKDI0LjAgLyBwZXJpb2QudmFsdWUpICogNjAKICAgIHdoZW4gJ3NlY29uZCcgdGhlbiBmcmVxdWVuY3kgKiAoMjQuMCAvIHBlcmlvZC52YWx1ZSkgKiA2MCAqIDYwCiAgICB3aGVuICdkYXknIHRoZW4gZnJlcXVlbmN5ICogKDI0LjAgLyBwZXJpb2QudmFsdWUpIC8gMjQKICAgIHdoZW4gJ3dlZWsnIHRoZW4gZnJlcXVlbmN5ICogKDI0LjAgLyBwZXJpb2QudmFsdWUpIC8gKDI0ICogNykKICAgIHdoZW4gJ21vbnRoJyB0aGVuIGZyZXF1ZW5jeSAqICgyNC4wIC8gcGVyaW9kLnZhbHVlKSAvICgyNCAqIDMwKSAvKiBhc3N1bWluZyAzMCBkYXlzIGluIG1vbnRoICovCiAgICB3aGVuICd5ZWFyJyB0aGVuIGZyZXF1ZW5jeSAqICgyNC4wIC8gcGVyaW9kLnZhbHVlKSAvICgyNCAqIDM2NSkgLyogYXNzdW1pbmcgMzY1IGRheXMgaW4geWVhciAqLwogICAgd2hlbiAnaG91cnMnIHRoZW4gZnJlcXVlbmN5ICogKDI0LjAgLyBwZXJpb2QudmFsdWUpCiAgICB3aGVuICdtaW51dGVzJyB0aGVuIGZyZXF1ZW5jeSAqICgyNC4wIC8gcGVyaW9kLnZhbHVlKSAqIDYwCiAgICB3aGVuICdzZWNvbmRzJyB0aGVuIGZyZXF1ZW5jeSAqICgyNC4wIC8gcGVyaW9kLnZhbHVlKSAqIDYwICogNjAKICAgIHdoZW4gJ2RheXMnIHRoZW4gZnJlcXVlbmN5ICogKDI0LjAgLyBwZXJpb2QudmFsdWUpIC8gMjQKICAgIHdoZW4gJ3dlZWtzJyB0aGVuIGZyZXF1ZW5jeSAqICgyNC4wIC8gcGVyaW9kLnZhbHVlKSAvICgyNCAqIDcpCiAgICB3aGVuICdtb250aHMnIHRoZW4gZnJlcXVlbmN5ICogKDI0LjAgLyBwZXJpb2QudmFsdWUpIC8gKDI0ICogMzApIC8qIGFzc3VtaW5nIDMwIGRheXMgaW4gbW9udGggKi8KICAgIHdoZW4gJ3llYXJzJyB0aGVuIGZyZXF1ZW5jeSAqICgyNC4wIC8gcGVyaW9kLnZhbHVlKSAvICgyNCAqIDM2NSkgLyogYXNzdW1pbmcgMzY1IGRheXMgaW4geWVhciAqLwogICAgZWxzZSBudWxsCiAgZW5kCgogIGRlZmluZSBmdW5jdGlvbiAiSGFzRW5kIihwZXJpb2QgSW50ZXJ2YWw8RGF0ZVRpbWU+ICk6CiAgbm90IChlbmQgb2YgcGVyaW9kIGlzIG51bGwKICAgIG9yIGVuZCBvZiBwZXJpb2QgPSBtYXhpbXVtIERhdGVUaW1lCikKCiAgZGVmaW5lIGZ1bmN0aW9uIE1lZGljYXRpb25SZXF1ZXN0UGVyaW9kKFJlcXVlc3QgIk1lZGljYXRpb25SZXF1ZXN0Iik6CiAgUmVxdWVzdCBSCiAgICBsZXQKICAgICAgZG9zYWdlOiBzaW5nbGV0b24gZnJvbSBSLmRvc2FnZUluc3RydWN0aW9uLAogICAgICBkb3NlQW5kUmF0ZTogc2luZ2xldG9uIGZyb20gZG9zYWdlLmRvc2VBbmRSYXRlLAogICAgICBkb3NlUmFuZ2U6IGRvc2VBbmRSYXRlLmRvc2UgYXMgUmFuZ2UsCiAgICAgIGRvc2VRdWFudGl0eTogZG9zZUFuZFJhdGUuZG9zZSBhcyBTaW1wbGVRdWFudGl0eSwKICAgICAgZG9zZTogQ29hbGVzY2UoZW5kIG9mIGRvc2VSYW5nZSwgZG9zZVF1YW50aXR5KSwKICAgICAgdGltaW5nOiBkb3NhZ2UudGltaW5nLAogICAgICBmcmVxdWVuY3k6IENvYWxlc2NlKHRpbWluZy5yZXBlYXQuZnJlcXVlbmN5TWF4LCB0aW1pbmcucmVwZWF0LmZyZXF1ZW5jeSksCiAgICAgIHBlcmlvZDogU3lzdGVtLlF1YW50aXR5IHsgdmFsdWU6IHRpbWluZy5yZXBlYXQucGVyaW9kLCB1bml0OiB0aW1pbmcucmVwZWF0LnBlcmlvZFVuaXQudmFsdWUgfSwKICAgICAgZG9zZXNQZXJEYXk6IENvYWxlc2NlKFRvRGFpbHkoRkhJUkhlbHBlcnMuVG9JbnRlZ2VyKGZyZXF1ZW5jeSksIHBlcmlvZCksIENvdW50KHRpbWluZy5yZXBlYXQudGltZU9mRGF5KSwgMS4wKSwKICAgICAgYm91bmRzUGVyaW9kOiB0aW1pbmcucmVwZWF0LmJvdW5kcyBhcyBQZXJpb2QsCiAgICAgIGRheXNTdXBwbHk6IFIuZGlzcGVuc2VSZXF1ZXN0LmV4cGVjdGVkU3VwcGx5RHVyYXRpb24sCiAgICAgIHF1YW50aXR5OiBSLmRpc3BlbnNlUmVxdWVzdC5xdWFudGl0eSwKICAgICAgcmVmaWxsczogQ29hbGVzY2UoUi5kaXNwZW5zZVJlcXVlc3QubnVtYmVyT2ZSZXBlYXRzQWxsb3dlZCwgMCksCiAgICAgIHN0YXJ0RGF0ZToKICAgICAgICBDb2FsZXNjZSgKICAgICAgICAgIHN0YXJ0IG9mIGJvdW5kc1BlcmlvZCwKICAgICAgICAgIHN0YXJ0IG9mIFIuZGlzcGVuc2VSZXF1ZXN0LnZhbGlkaXR5UGVyaW9kLAogICAgICAgICAgUi5hdXRob3JlZE9uCiAgICAgICAgKQogICAgcmV0dXJuCiAgICAgIGlmIEhhc0VuZChib3VuZHNQZXJpb2QpIHRoZW4KICAgICAgICBJbnRlcnZhbFtzdGFydERhdGUsIGVuZCBvZiBib3VuZHNQZXJpb2RdCiAgICAgIGVsc2UKICAgICAgICAoCiAgICAgICAgICBDb2FsZXNjZShkYXlzU3VwcGx5LCBxdWFudGl0eSAvIChkb3NlICogZG9zZXNQZXJEYXkpKQogICAgICAgICAgICAqICgxICsgcmVmaWxscykKICAgICAgICApIGR1cmF0aW9uSW5EYXlzCiAgICAgICAgICByZXR1cm4gSW50ZXJ2YWxbc3RhcnREYXRlLCBzdGFydERhdGUgKyBkdXJhdGlvbkluRGF5c10KCgpkZWZpbmUgZnVuY3Rpb24gIkRvc2VzUGVyRGF5IihmcmVxdWVuY3kgQ29kZSk6CgkvKkNhbGN1bGF0ZXMgdGhlIGN1bXVsYXRpdmUgZG9zZSBwZXIgZGF5IGZvciBlYWNoIHByZXNjcmlwdGlvbiovCgljYXNlCgkJd2hlbiBmcmVxdWVuY3kgfiBIQ0MuIk9uY2UgZGFpbHkgKHF1YWxpZmllciB2YWx1ZSkiIHRoZW4gMS4wCgkJd2hlbiBmcmVxdWVuY3kgfiBIQ0MuIlR3aWNlIGEgZGF5IChxdWFsaWZpZXIgdmFsdWUpIiB0aGVuIDIuMAoJCXdoZW4gZnJlcXVlbmN5IH4gSENDLiJUaHJlZSB0aW1lcyBkYWlseSAocXVhbGlmaWVyIHZhbHVlKSIgdGhlbiAzLjAKCQl3aGVuIGZyZXF1ZW5jeSB+IEhDQy4iRm91ciB0aW1lcyBkYWlseSAocXVhbGlmaWVyIHZhbHVlKSIgdGhlbiA0LjAKCQl3aGVuIGZyZXF1ZW5jeSB+IEhDQy4iRXZlcnkgdHdlbnR5IGZvdXIgaG91cnMgKHF1YWxpZmllciB2YWx1ZSkiIHRoZW4gMS4wCgkJd2hlbiBmcmVxdWVuY3kgfiBIQ0MuIkV2ZXJ5IHR3ZWx2ZSBob3VycyAocXVhbGlmaWVyIHZhbHVlKSIgdGhlbiAyLjAKCQl3aGVuIGZyZXF1ZW5jeSB+IEhDQy4iRXZlcnkgdGhpcnR5IHNpeCBob3VycyAocXVhbGlmaWVyIHZhbHVlKSIgdGhlbiAwLjY3CgkJd2hlbiBmcmVxdWVuY3kgfiBIQ0MuIkV2ZXJ5IGVpZ2h0IGhvdXJzIChxdWFsaWZpZXIgdmFsdWUpIiB0aGVuIDMuMAoJCXdoZW4gZnJlcXVlbmN5IH4gSENDLiJFdmVyeSBmb3VyIGhvdXJzIChxdWFsaWZpZXIgdmFsdWUpIiB0aGVuIDYuMAoJCXdoZW4gZnJlcXVlbmN5IH4gSENDLiJFdmVyeSBzaXggaG91cnMgKHF1YWxpZmllciB2YWx1ZSkiIHRoZW4gNC4wCgkJd2hlbiBmcmVxdWVuY3kgfiBIQ0MuIkV2ZXJ5IHNldmVudHkgdHdvIGhvdXJzIChxdWFsaWZpZXIgdmFsdWUpIiB0aGVuIDAuMzQKCQl3aGVuIGZyZXF1ZW5jeSB+IEhDQy4iRXZlcnkgZm9ydHkgZWlnaHQgaG91cnMgKHF1YWxpZmllciB2YWx1ZSkiIHRoZW4gMC41CgkJd2hlbiBmcmVxdWVuY3kgfiBIQ0MuIkV2ZXJ5IGVpZ2h0IHRvIHR3ZWx2ZSBob3VycyAocXVhbGlmaWVyIHZhbHVlKSIgdGhlbiAyLjAKCQl3aGVuIGZyZXF1ZW5jeSB+IEhDQy4iRXZlcnkgc2l4IHRvIGVpZ2h0IGhvdXJzIChxdWFsaWZpZXIgdmFsdWUpIiB0aGVuIDMuMAoJCXdoZW4gZnJlcXVlbmN5IH4gSENDLiJFdmVyeSB0aHJlZSB0byBmb3VyIGhvdXJzIChxdWFsaWZpZXIgdmFsdWUpIiB0aGVuIDYuMAoJCXdoZW4gZnJlcXVlbmN5IH4gSENDLiJFdmVyeSB0aHJlZSB0byBzaXggaG91cnMgKHF1YWxpZmllciB2YWx1ZSkiIHRoZW4gNC4wCgkJd2hlbiBmcmVxdWVuY3kgfiBIQ0MuIkV2ZXJ5IHR3byB0byBmb3VyIGhvdXJzIChxdWFsaWZpZXIgdmFsdWUpIiB0aGVuIDYuMAoJCXdoZW4gZnJlcXVlbmN5IH4gSENDLiJPbmUgdG8gZm91ciB0aW1lcyBhIGRheSAocXVhbGlmaWVyIHZhbHVlKSIgdGhlbiA0LjAKCQl3aGVuIGZyZXF1ZW5jeSB+IEhDQy4iT25lIHRvIHRocmVlIHRpbWVzIGEgZGF5IChxdWFsaWZpZXIgdmFsdWUpIiB0aGVuIDMuMAoJCXdoZW4gZnJlcXVlbmN5IH4gSENDLiJPbmUgdG8gdHdvIHRpbWVzIGEgZGF5IChxdWFsaWZpZXIgdmFsdWUpIiB0aGVuIDIuMAoJCWVsc2UgbnVsbCAKCWVuZAoKICAvL2RlZmluZSBmdW5jdGlvbiAiR2V0TWVkaWNhdGlvbkRhaWx5RG9zZSIoZG9zYWdlIFF1YW50aXR5LCBkb3Nlc1BlckRheSBEZWNpbWFsKToKICAvL2Rvc2FnZSAqIFF1YW50aXR5IHsgdmFsdWU6IGRvc2VzUGVyRGF5LCB1bml0OiAnL2QnIH0KCgpkZWZpbmUgIm1ldGhhZG9uZV9wcmVzY3JpYmVkIGF0IGRhdGUiOgpbTWVkaWNhdGlvblJlcXVlc3RdIE1SCiAgICAgICAgd2hlcmUgTVIuc3RhdHVzID0gJ2NvbXBsZXRlZCcKICAgICAgICBhbmQgTVIuaW50ZW50ID0gJ29yZGVyJwogICAgICAgIGFuZCBNUi5tZWRpY2F0aW9uIH4gSENDLiJtZXRoYWRvbmUiCiAgICAgICAgLy9hbmQgIkdldE1lZGljYXRpb25EYWlseURvc2UiKE1SLmRvc2FnZUluc3RydWN0aW9uLCAiRG9zZXNQZXJEYXkiKHNpbmdsZXRvbiBmcm9tIE1SLmRvc2FnZUluc3RydWN0aW9uLnRpbWluZy5yZXBlYXQuZnJlcXVlbmN5TWF4KSkgPj0gNjAgJ21nL2QnCiAgICAgICAgYW5kIE1lZGljYXRpb25SZXF1ZXN0UGVyaW9kKE1SKSBzdGFydHMgYmVmb3JlICJNZWFzdXJlbWVudCBEYXRlIgogICAgICAgIGFuZCBNZWRpY2F0aW9uUmVxdWVzdFBlcmlvZChNUikgZW5kcyBhZnRlciAiTWVhc3VyZW1lbnQgRGF0ZSIKCmRlZmluZSAiVk1NQ19kb25lIjoKW1Byb2NlZHVyZV0gUAogIHdoZXJlIFAuc3RhdHVzID0gJ2NvbXBsZXRlZCcKICBhbmQgUC5jb2RlIH4gSEMuIlZvbHVudGFyeSBtZWRpY2FsIG1hbGUgY2lyY3VtY2lzaW9uIFZNTUMiCgpkZWZpbmUgIlZNTUNfYWR2ZXJzZV9ldmVudCI6CltBZHZlcnNlRXZlbnRdIEFFIAogIHdpdGggW1Byb2NlZHVyZV0gUAogICAgICBzdWNoIHRoYXQgQUUuc3VzcGVjdEVudGl0eS5pbnN0YW5jZS5yZWZlcmVuY2VzKFApIGFuZCBQLnN0YXR1cyA9ICdjb21wbGV0ZWQnIAogICAgICBhbmQgUC5jb2RlIH4gIEhDLiJWb2x1bnRhcnkgbWVkaWNhbCBtYWxlIGNpcmN1bWNpc2lvbiBWTU1DIgogICAgICBhbmQgUC5wZXJmb3JtZWQgYWZ0ZXIgc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIKICAgICAgYW5kIFAucGVyZm9ybWVkIGJlZm9yZSBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIKICAgICAgYW5kIEFFLmRhdGUgPD0gKFAucGVyZm9ybWVkICsgMzAgZGF5cykKICAgICAgYW5kIEFFLmRhdGUgPj0gKFAucGVyZm9ybWVkKQogIHdoZXJlIEFFLmFjdHVhbGl0eSA9ICdhY3R1YWwnCgpkZWZpbmUgIlZNTUNfYWR2ZXJzZV9ldmVudF90eXBlIjoKICAgIGNhc2UgCiAgICAgICAgd2hlbiBleGlzdHMoIlZNTUNfYWR2ZXJzZV9ldmVudCIgQUUgd2hlcmUgQUUuZXZlbnQgfiBIQy4iQWJub3JtYWwgcGFpbiIpIHRoZW4gIEhDLiJBYm5vcm1hbCBwYWluIgogICAgICAgIHdoZW4gZXhpc3RzKCJWTU1DX2FkdmVyc2VfZXZlbnQiIEFFIHdoZXJlIEFFLmV2ZW50IH4gSEMuIkFuYWVzdGhlc2lhLXJlbGF0ZWQgZWZmZWN0cyIpIHRoZW4gIEhDLiJBbmFlc3RoZXNpYS1yZWxhdGVkIGVmZmVjdHMiCiAgICAgICAgd2hlbiBleGlzdHMoIlZNTUNfYWR2ZXJzZV9ldmVudCIgQUUgd2hlcmUgQUUuZXZlbnQgfiBIQy4iRGFtYWdlIHRvIHRoZSBwZW5pcyIpIHRoZW4gIEhDLiJEYW1hZ2UgdG8gdGhlIHBlbmlzIgogICAgICAgIHdoZW4gZXhpc3RzKCJWTU1DX2FkdmVyc2VfZXZlbnQiIEFFIHdoZXJlIEFFLmV2ZW50IH4gSEMuIkRpZmZpY3VsdHkgdXJpbmF0aW5nIikgdGhlbiAgSEMuIkRpZmZpY3VsdHkgdXJpbmF0aW5nIgogICAgICAgIHdoZW4gZXhpc3RzKCJWTU1DX2FkdmVyc2VfZXZlbnQiIEFFIHdoZXJlIEFFLmV2ZW50IH4gSEMuIkV4Y2Vzc2l2ZSBibGVlZGluZyIpIHRoZW4gIEhDLiJFeGNlc3NpdmUgYmxlZWRpbmciCiAgICAgICAgd2hlbiBleGlzdHMoIlZNTUNfYWR2ZXJzZV9ldmVudCIgQUUgd2hlcmUgQUUuZXZlbnQgfiBIQy4iRXhjZXNzaXZlIHNraW4gcmVtb3ZhbCIpIHRoZW4gIEhDLiJFeGNlc3NpdmUgc2tpbiByZW1vdmFsIgogICAgICAgIHdoZW4gZXhpc3RzKCJWTU1DX2FkdmVyc2VfZXZlbnQiIEFFIHdoZXJlIEFFLmV2ZW50IH4gSEMuIkV4Y2Vzc2l2ZSBzd2VsbGluZyIpIHRoZW4gIEhDLiJFeGNlc3NpdmUgc3dlbGxpbmciCiAgICAgICAgd2hlbiBleGlzdHMoIlZNTUNfYWR2ZXJzZV9ldmVudCIgQUUgd2hlcmUgQUUuZXZlbnQgfiBIQy4iSGFlbWF0b21hIikgdGhlbiAgSEMuIkhhZW1hdG9tYSIKICAgICAgICB3aGVuIGV4aXN0cygiVk1NQ19hZHZlcnNlX2V2ZW50IiBBRSB3aGVyZSBBRS5ldmVudCB+IEhDLiJJbmZlY3Rpb24iKSB0aGVuICBIQy4iSW5mZWN0aW9uIgogICAgICAgIHdoZW4gZXhpc3RzKCJWTU1DX2FkdmVyc2VfZXZlbnQiIEFFIHdoZXJlIEFFLmV2ZW50IH4gSEMuIkluanVyeSB0byBnbGFucyIpIHRoZW4gIEhDLiJJbmp1cnkgdG8gZ2xhbnMiCiAgICAgICAgd2hlbiBleGlzdHMoIlZNTUNfYWR2ZXJzZV9ldmVudCIgQUUgd2hlcmUgQUUuZXZlbnQgfiBIQy4iU2NhciBvciBkaXNmaWd1cmVtZW50IikgdGhlbiAgSEMuIlNjYXIgb3IgZGlzZmlndXJlbWVudCIKICAgICAgICB3aGVuIGV4aXN0cygiVk1NQ19hZHZlcnNlX2V2ZW50IiBBRSB3aGVyZSBBRS5ldmVudCB+IEhDLiJTaGFycHMgaW5qdXJ5IHRvIHBlcnNvbm5lbCIpIHRoZW4gIEhDLiJTaGFycHMgaW5qdXJ5IHRvIHBlcnNvbm5lbCIKICAgICAgICB3aGVuIGV4aXN0cygiVk1NQ19hZHZlcnNlX2V2ZW50IiBBRSB3aGVyZSBBRS5ldmVudCB+IEhDLiJXb3VuZCBkaXNydXB0aW9uIikgdGhlbiAgSEMuIldvdW5kIGRpc3J1cHRpb24iCiAgICAgICAgZWxzZSBIQy4iT3RoZXIgLSBISVYuQi5ERTIyMiIKICAgIGVuZAoKZGVmaW5lICJWTU1DX2FkdmVyc2VfZXZlbnRfSW50cmFvcGVyYXRpdmUiOgpbQWR2ZXJzZUV2ZW50XSBBRSAKICB3aXRoIFtQcm9jZWR1cmVdIFAKICAgICAgc3VjaCB0aGF0IEFFLnN1c3BlY3RFbnRpdHkuaW5zdGFuY2UucmVmZXJlbmNlcyhQKSBhbmQgUC5zdGF0dXMgPSAnY29tcGxldGVkJyAKICAgICAgYW5kIFAuY29kZSB+ICBIQy4iVm9sdW50YXJ5IG1lZGljYWwgbWFsZSBjaXJjdW1jaXNpb24gVk1NQyIKICAgICAgYW5kIFAucGVyZm9ybWVkIGFmdGVyIHN0YXJ0IG9mICJNZWFzdXJlbWVudCBQZXJpb2QiCiAgICAgIGFuZCBQLnBlcmZvcm1lZCBiZWZvcmUgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiCiAgICAgIGFuZCBBRS5kYXRlID0gUC5wZXJmb3JtZWQKICB3aGVyZSBBRS5hY3R1YWxpdHkgPSAnYWN0dWFsJwoKZGVmaW5lICJWTU1DX2FkdmVyc2VfZXZlbnRfUG9zdG9wZXJhdGl2ZSI6CltBZHZlcnNlRXZlbnRdIEFFIAogIHdpdGggW1Byb2NlZHVyZV0gUAogICAgICBzdWNoIHRoYXQgQUUuc3VzcGVjdEVudGl0eS5pbnN0YW5jZS5yZWZlcmVuY2VzKFApIGFuZCBQLnN0YXR1cyA9ICdjb21wbGV0ZWQnIAogICAgICBhbmQgUC5jb2RlIH4gIEhDLiJWb2x1bnRhcnkgbWVkaWNhbCBtYWxlIGNpcmN1bWNpc2lvbiBWTU1DIgogICAgICBhbmQgUC5wZXJmb3JtZWQgYWZ0ZXIgc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIKICAgICAgYW5kIFAucGVyZm9ybWVkIGJlZm9yZSBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIKICAgICAgYW5kIEFFLmRhdGUgPD0gKFAucGVyZm9ybWVkICsgMzAgZGF5cykKICAgICAgYW5kIEFFLmRhdGUgPiAoUC5wZXJmb3JtZWQpCiAgd2hlcmUgQUUuYWN0dWFsaXR5ID0gJ2FjdHVhbCcKCiAgZGVmaW5lICJWTU1DX2FkdmVyc2VfZXZlbnRfdGltaW5nIjoKICAgIGNhc2UgCiAgICAgICAgd2hlbiBleGlzdHMoVk1NQ19hZHZlcnNlX2V2ZW50X0ludHJhb3BlcmF0aXZlKSB0aGVuICBIQy4iSW50cmFvcGVyYXRpdmUiCiAgICAgICAgd2hlbiBleGlzdHMoVk1NQ19hZHZlcnNlX2V2ZW50X1Bvc3RvcGVyYXRpdmUpIHRoZW4gIEhDLiJQb3N0b3BlcmF0aXZlIgogICAgICAgIGVsc2UgbnVsbAogICAgZW5kCgoKICBkZWZpbmUgIlBhcnRuZXIgb3IgY29udGFjdCBvZiBhbiBpbmRleCBjYXNlIjoKICAgIFtPYnNlcnZhdGlvbjogSEMuIlJlZmVycmVkIHRocm91Z2ggcGFydG5lciBzZXJ2aWNlcyJdIE8gCiAgICB3aGVyZSBPLnN0YXR1cyBpbiB7ICdmaW5hbCcsICdhbWVuZGVkJywgJ2NvcnJlY3RlZCcgfQogICAgYW5kIGV4aXN0cyhPLmNhdGVnb3J5IE9DIHdoZXJlIE9DIH4gSENDLiJzb2NpYWwtaGlzdG9yeSIpCiAgICBhbmQgTy5jb2RlIH4gSEMuIlBhcnRuZXIgb3IgY29udGFjdCBvZiBhbiBpbmRleCBjYXNlIgogIAogIGRlZmluZSAiRHJ1Zy1pbmplY3RpbmcgcGFydG5lciI6CiAgICBbT2JzZXJ2YXRpb246IEhDLiJUeXBlIG9mIGNvbnRhY3Qgb3IgcGFydG5lciBmb3IgcGFydG5lciBzZXJ2aWNlcyJdIE8gCiAgICB3aGVyZSBPLnN0YXR1cyBpbiB7ICdmaW5hbCcsICdhbWVuZGVkJywgJ2NvcnJlY3RlZCcgfQogICAgYW5kIGV4aXN0cyhPLmNhdGVnb3J5IE9DIHdoZXJlIE9DIH4gSENDLiJzb2NpYWwtaGlzdG9yeSIpCiAgICBhbmQgTy5jb2RlIH4gSEMuIkRydWctaW5qZWN0aW5nIHBhcnRuZXIgLSBISVYuQi5ERTEwIgogIAogIGRlZmluZSAiU2V4dWFsIHBhcnRuZXIiOgogICAgW09ic2VydmF0aW9uOiBIQy4iVHlwZSBvZiBjb250YWN0IG9yIHBhcnRuZXIgZm9yIHBhcnRuZXIgc2VydmljZXMiXSBPIAogICAgd2hlcmUgTy5zdGF0dXMgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcsICdjb3JyZWN0ZWQnIH0KICAgIGFuZCBleGlzdHMoTy5jYXRlZ29yeSBPQyB3aGVyZSBPQyB+IEhDQy4ic29jaWFsLWhpc3RvcnkiKQogICAgYW5kIE8uY29kZSB+IEhDLiJTZXh1YWwgcGFydG5lciAtIEhJVi5CLkRFMTEiIAogIAoKICBkZWZpbmUgIkZpcnN0IEhJViBUcmVhdG1lbnQiOgogICAgRmlyc3QoIkhJViBUcmVhdG1lbnQgQWN0aXZlIikKCgogIGRlZmluZSAiVGltZSB0byBzdGFydCBBUlQiOgogICAgY2FzZSAKICAgICAgICB3aGVuIGRpZmZlcmVuY2UgaW4gZGF5cyBiZXR3ZWVuICJGaXJzdCBISVYgVHJlYXRtZW50Ii5lZmZlY3RpdmUgYW5kICJISVYgUG9zaXRpdmUgQ29uZGl0aW9uIi5vbnNldCA8PSA3IHRoZW4gSEMuIldpdGhpbiA3IGRheXMgb2YgSElWIGRpYWdub3NpcyIKICAgICAgICB3aGVuIGRpZmZlcmVuY2UgaW4gZGF5cyBiZXR3ZWVuICJGaXJzdCBISVYgVHJlYXRtZW50Ii5lZmZlY3RpdmUgYW5kICJISVYgUG9zaXRpdmUgQ29uZGl0aW9uIi5vbnNldCA8PSAzMCB0aGVuIEhDLiJXaXRoaW4gMzAgZGF5cyBvZiBISVYgZGlhZ25vc2lzIgogICAgICAgIHdoZW4gZGlmZmVyZW5jZSBpbiBkYXlzIGJldHdlZW4gIkZpcnN0IEhJViBUcmVhdG1lbnQiLmVmZmVjdGl2ZSBhbmQgIkhJViBQb3NpdGl2ZSBDb25kaXRpb24iLm9uc2V0IDw9IDkwIHRoZW4gSEMuIldpdGhpbiA5MCBkYXlzIG9mIEhJViBkaWFnbm9zaXMiCiAgICBlbHNlIG51bGwKICAgIGVuZAogIAogIC8vSElWIHN0YXR1cyBvZiBwYXJ0bmVyIG9yIGNvbnRhY3QgKGFscmVhZHkga25vd24gcG9zaXRpdmUsIG5ld2x5IGRpYWdub3NlZCBwb3NpdGl2ZSwgbmVnYXRpdmUpIAoKICBkZWZpbmUgImFscmVhZHkga25vd24gcG9zaXRpdmUiOgogICAgW09ic2VydmF0aW9uOiBIQy4iSElWIHN0YXR1cyBvZiBwYXJ0bmVyIG9yIGNvbnRhY3QiXSBPIAogICAgd2hlcmUgTy5zdGF0dXMgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcsICdjb3JyZWN0ZWQnIH0KICAgIGFuZCBleGlzdHMoTy5jYXRlZ29yeSBPQyB3aGVyZSBPQyB+IEhDQy4ic29jaWFsLWhpc3RvcnkiKQogICAgYW5kIE8uY29kZSB+IEhDLiJBbHJlYWR5IGtuZXcgcG9zaXRpdmUiCiAgCiAgZGVmaW5lICJOZXdseSBkaWFnbm9zZWQiOgogICAgW09ic2VydmF0aW9uOiBIQy4iSElWIHN0YXR1cyBvZiBwYXJ0bmVyIG9yIGNvbnRhY3QiXSBPIAogICAgd2hlcmUgTy5zdGF0dXMgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcsICdjb3JyZWN0ZWQnIH0KICAgIGFuZCBleGlzdHMoTy5jYXRlZ29yeSBPQyB3aGVyZSBPQyB+IEhDQy4ic29jaWFsLWhpc3RvcnkiKQogICAgYW5kIE8uY29kZSB+IEhDLiJOZXdseSBkaWFnbm9zZWQiCgogIGRlZmluZSAiTmVnYXRpdmUgLSBISVYuSC5ERTM3IjoKICAgIFtPYnNlcnZhdGlvbjogSEMuIkhJViBzdGF0dXMgb2YgcGFydG5lciBvciBjb250YWN0Il0gTyAKICAgIHdoZXJlIE8uc3RhdHVzIGluIHsgJ2ZpbmFsJywgJ2FtZW5kZWQnLCAnY29ycmVjdGVkJyB9CiAgICBhbmQgZXhpc3RzKE8uY2F0ZWdvcnkgT0Mgd2hlcmUgT0MgfiBIQ0MuInNvY2lhbC1oaXN0b3J5IikKICAgIGFuZCBPLmNvZGUgfiBIQy4iTmVnYXRpdmUgLSBISVYuSC5ERTM3IgogIAogIGRlZmluZSAiSElWIHN0YXR1cyBvZiBwYXJ0bmVyIG9yIGNvbnRhY3QiOgogICAgY2FzZSAKICAgICAgICB3aGVuIGV4aXN0cygiYWxyZWFkeSBrbm93biBwb3NpdGl2ZSIpIHRoZW4gSEMuIkFscmVhZHkga25ldyBwb3NpdGl2ZSIKICAgICAgICB3aGVuIGV4aXN0cygiTmV3bHkgZGlhZ25vc2VkIikgdGhlbiBIQy4iTmV3bHkgZGlhZ25vc2VkIgogICAgICAgIHdoZW4gZXhpc3RzKCJOZWdhdGl2ZSAtIEhJVi5ILkRFMzciKSB0aGVuIEhDLiJOZWdhdGl2ZSAtIEhJVi5ILkRFMzciCiAgICAgICAgZWxzZSBudWxsCiAgICBlbmQKCgovL25lZWQgdG8gZGVmaW5lCiAgZGVmaW5lIFNUSV90ZXN0aW5nOgogICAgW1Byb2NlZHVyZV0gUAogIHdoZXJlIFAuc3RhdHVzID0gJ2NvbXBsZXRlZCcKICBhbmQgUC5jb2RlIH4gSEMuIlNUSSB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgc2VydmljZXMiCgoKLy8oaW5jbHVkaW5nIFByRVAsIE9BTVQsIE5TUCwgU1RJIHNlcnZpY2VzLCBWTU1DKSAKICBkZWZpbmUgIkhJViBwcmV2ZW50aW9uIGludGVydmVudGlvbiI6CiAgTGlzdDxTdHJpbmc+ewogICAgaWYgIkhJViBQUkVQIEFjdGl2ZSIgdGhlbiAnUHJFUCcgZWxzZSBudWxsLAogICAgaWYgT0FNVF9pbml0aWF0ZWQgdGhlbiAnT0FNVCcgZWxzZSBudWxsLAogICAgaWYgIk5lZWRsZSBTeXJpbmdlIERpc3BlbnNlZCIgdGhlbiAnTlNQJyBlbHNlIG51bGwsCiAgICBpZiBTVElfdGVzdGluZyB0aGVuICdTVEkgc2VydmljZXMnIGVsc2UgbnVsbCwKICAgIGlmIFZNTUNfZG9uZSB0aGVuICdWTU1DJyBlbHNlIG51bGwKICB9CgpkZWZpbmUgIk5lZ2F0aXZlIFRlc3RzIHdpdGhpbiBNZWFzdXJlbWVudCBQZXJpb2QiOgpISUMuIkhJViBOZWdhdGl2ZSBPYnNlcnZhdGlvbiIgTwogICAgd2l0aCBISUMuIkNsaWVudCBpcyBhdCBlbGV2YXRlZCByaXNrIGZvciBISVYgYWNxdWlzaXRpb24iIEhJVgogICAgc3VjaCB0aGF0IE8uaGFzTWVtYmVyLnJlZmVyZW5jZXMoSElWKQogICAgYW5kIE8uaXNzdWVkIGFmdGVyIHN0YXJ0IG9mICJNZWFzdXJlbWVudCBQZXJpb2QiCiAgICBhbmQgTy5pc3N1ZWQgYmVmb3JlIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIgpTb3J0IGJ5IE8uaXNzdWVkCgpkZWZpbmUgIkZpcnN0IE5lZ2F0aXZlIFRlc3Qgd2l0aGluIE1lYXN1cmVtZW50IFBlcmlvZCI6CiggRmlyc3QoIk5lZ2F0aXZlIFRlc3RzIHdpdGhpbiBNZWFzdXJlbWVudCBQZXJpb2QiKSkKCmRlZmluZSAiTmVnYXRpdmUgVGVzdHMgYWZ0ZXIgRmlyc3QgTmVnYXRpdmUgVGVzdCI6CkhJQy4iSElWIE5lZ2F0aXZlIE9ic2VydmF0aW9uIiBPCiAgICB3aXRoIEhJQy4iQ2xpZW50IGlzIGF0IGVsZXZhdGVkIHJpc2sgZm9yIEhJViBhY3F1aXNpdGlvbiIgSElWCiAgICBzdWNoIHRoYXQgTy5oYXNNZW1iZXIucmVmZXJlbmNlcyhISVYpCiAgICBhbmQgTy5pc3N1ZWQgYWZ0ZXIgIkZpcnN0IE5lZ2F0aXZlIFRlc3Qgd2l0aGluIE1lYXN1cmVtZW50IFBlcmlvZCIKICAgIGFuZCBPLmlzc3VlZCBiZWZvcmUgKCJGaXJzdCBOZWdhdGl2ZSBUZXN0IHdpdGhpbiBNZWFzdXJlbWVudCBQZXJpb2QiICsgIlRlc3RpbmcgSW50ZXJ2YWwiKQpTb3J0IGJ5IE8uaXNzdWVk"/>
  </content>
  <content>
    <contentType value="application/elm+xml"/>
  </content>
</Library>