{
  "resourceType" : "Library",
  "id" : "HIVIND90Logic",
  "meta" : {
    "profile" : ["http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-shareablelibrary",
    "http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-publishablelibrary",
    "http://hl7.org/fhir/uv/cql/StructureDefinition/cql-library",
    "http://hl7.org/fhir/uv/cql/StructureDefinition/cql-module"]
  },
  "text" : {
    "status" : "generated",
    "div" : "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p class=\"res-header-id\"><b>Generated Narrative: Library HIVIND90Logic</b></p><a name=\"HIVIND90Logic\"> </a><a name=\"hcHIVIND90Logic\"> </a><a name=\"HIVIND90Logic-en-US\"> </a><h2>Related Artifacts</h2><table class=\"grid\"><tr><td>Depends On</td><td>Library HIC</td><td><code>http://smart.who.int/hiv/Library/HIVCommon|0.0.1</code></td></tr><tr><td>Depends On</td><td>Library WCom</td><td><a href=\"Library-WHOCommon.html\">WHOCommon</a></td></tr><tr><td>Depends On</td><td>Library HE</td><td><a href=\"Library-HIVElements.html\">HIVElements</a></td></tr><tr><td>Depends On</td><td>Library HIE</td><td><a href=\"Library-HIVIndicatorElements.html\">HIVIndicatorElements</a></td></tr><tr><td>Depends On</td><td>Library Config</td><td><a href=\"Library-HIVConfig.html\">HIVConfig</a></td></tr></table><h2>Parameters</h2><table class=\"grid\"><tr><td>Measurement Period</td><td>in</td><td>0</td><td>1</td><td>Period</td></tr><tr><td>Patient</td><td>out</td><td>0</td><td>1</td><td>Patient</td></tr><tr><td>Initial Population</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Numerator</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Denominator</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Administrative Gender Stratifier</td><td>out</td><td>0</td><td>1</td><td>Coding</td></tr><tr><td>Age Stratifier</td><td>out</td><td>0</td><td>1</td><td>string</td></tr><tr><td>Geographic Region Stratifier</td><td>out</td><td>0</td><td>1</td><td>string</td></tr><tr><td>patientGroups Stratifier</td><td>out</td><td>0</td><td>*</td><td>string</td></tr><tr><td>Stratification</td><td>out</td><td>0</td><td>1</td><td>string</td></tr></table><h2>Contents</h2><p><code>text/cql</code></p><pre><code class=\"language-sql\">/**\n * Library: HIV.IND.90 Logic\n * Ref No: HEP.5\n * Short Name: HBV treatment among people living with HIV\n *\n * Definition: % of people living with HIV and diagnosed with HBV infection who are on TDF-based ART\n *\n * Numerator: Number of people newly started on HBV treatment (TDF) during the reporting period  | plus | Number of people living with HIV who are already on TDF-based ART\n * Numerator Calculation: COUNT of clients with &quot;HIV status&quot;='HIV-positive' AND &quot;HBsAg test date&quot; in the reporting period AND &quot;HBsAg test result&quot;=' HBsAg positive' AND &quot;HBV treatment (TDF) start date&quot; in the reporting period | + | COUNT of clients with &quot;HIV status&quot;='HIV-positive' AND &quot;HBsAg test date&quot; in the reporting period AND &quot;HBsAg test result&quot;=' HBsAg positive' AND &quot;Currently on TDF-based ART&quot;\n * Numerator Exclusions: \n *\n * Denominator: Number of people living with HIV who were diagnosed with HBV\n * Denominator Calculation: COUNT of clients with &quot;HIV status&quot;='HIV-positive' AND &quot;HBsAg test date&quot; in the reporting period AND &quot;HBsAg test result&quot;='HBsAg positive'\n * Denominator Exclusions: \n *\n * Disaggregations:\n * •\u00a0Gender (male, female, other*) \n *  •\u00a0Age (15–19, 20–24, 25–29, 30–49, 50+ years) \n *  • Key population (men who have sex with men, people living in prisons and other closed settings, people who inject drugs, sex workers, trans and gender diverse people)** \n *  •\u00a0Cities and other administrative regions of epidemiologic importance\n *\n * Disaggregation Elements: Gender | Age | Key population member type\n *\n * Numerator and Denominator Elements:\n * Currently on TDF-based ART \n *  HBV treatment (TDF) start date \n *  HBsAg test date \n *  HBsAg test result \n *  HIV status\n *\n * Reference: Consolidated guidelines on person-centred HIV strategic information: strengthening routine data for impact. Geneva: World Health Organization; 2022\n * \n * Data Concepts:\n * HIV.A.DE17: Age | Calculated age (number of years) of the client based on date of birth\n * HIV.A.DE18: Gender* | Gender of the client*\n * HIV.A.DE19: Female | Client identifies as female\n * HIV.A.DE20: Male | Client identifies as male\n * HIV.A.DE21: Transgender male | Client identifies as transgender male\n * HIV.A.DE22: Transgender female | Client identifies as transgender female\n * HIV.A.DE23: Other | Additional category\n * HIV.B.DE50: Key population member type* | The type of key population that the client is included in\n * HIV.B.DE51: Sex worker | Client is a sex worker\n * HIV.B.DE52: Men who have sex with men | Client is a man who has sex with men\n * HIV.B.DE53: Trans and gender-diverse people | Client identifies as trans and gender-diverse\n * HIV.B.DE54: People who inject drugs | Client is a person who injects drugs\n * HIV.B.DE55: People living in prisons and other closed settings | Client lives in a prison or another closed setting\n * HIV.B.DE115: HIV status | HIV status reported after applying the national HIV testing algorithm. No single HIV test can provide an HIV-positive diagnosis.\n * HIV.B.DE116: HIV-positive | Client is HIV-positive\n * HIV.B.DE117: HIV-negative | Client is HIV-negative\n * HIV.B.DE118: Unknown | Client has unknown HIV status\n * HIV.D.DE161: HBsAg test date | Date client was tested for hepatitis B virus (HBV)\n * HIV.D.DE162: HBsAg test result | Hepatitis B virus test result (HBsAg)\n * HIV.D.DE163: Positive | HBsAg test result was positive\n * HIV.D.DE164: Negative | HBsAg test result was negative\n * HIV.D.DE165: Indeterminate | HBsAg test result was indeterminate\n * HIV.D.DE167: HBV treatment (TDF) start date | Date when client started treatment (TDF) for hepatitis B virus (HBV)\n * HIV.D.DE185: Currently on TDF-based ART | Client is currently on TDF-based ART regimen\n * HIV.E.DE114: Key population member type* | The type of key population that the infant's mother is included in\n * HIV.E.DE115: Sex worker | Infant's mother is a sex worker\n * HIV.E.DE116: People who inject drugs | Infant's mother is a person who injects drugs\n * HIV.E.DE117: Trans and gender-diverse people | Infant's mother identifies as trans and gender-diverse\n * HIV.E.DE118: People living in prisons and other closed setting | Infant's mother is in a prison or closed setting\n * HIV.G.DE17: HBsAg test date | Date client was tested for hepatitis B virus (HBV)\n * HIV.G.DE18: HBsAg test result | Hepatitis B virus test result (HBsAg)\n * HIV.G.DE19: Positive | HBsAg test result was positive\n * HIV.G.DE20: Negative | HBsAg test result was negative\n * HIV.G.DE21: Indeterminate | HBsAg test result was indeterminate\n *\n * Additional Context\n * - what it measures: Percentage of people living with HIV and infected with HBV who are currently on treatment\n * - rationale: •\u00a0The prevalence of HBV is high among people living with HIV. | •\u00a0The use of tenofovir offers good potential for harmonizing treatment across different populations, as tenofovir + lamivudine (or emtricitabine) is the preferred nucleoside reverse transcriptase inhibitor (NRTI) backbone for persons coinfected with HIV and HBV and also can be used among persons with TB and pregnant women.\n * - method: Patient monitoring tools (electronic or paper), EMR/electronic information systems\n * \n * Suggested Scoring Method: proportion | http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/proportion-measure-cqfm\n */\n\nlibrary HIVIND90Logic\n\n// Included Libraries\nusing FHIR version '4.0.1'\n\ninclude HIVCommon version '0.0.1' called HIC\ninclude FHIRHelpers version '4.0.1'\n\ninclude WHOCommon called WCom\ninclude HIVElements called HE\ninclude HIVIndicatorElements called HIE\ninclude HIVConfig called Config\n\n// Indicator Definition\nparameter &quot;Measurement Period&quot; Interval&lt;Date&gt; default Interval[@2023-01-01, @2023-01-30]\n\ncontext Patient\n/* Populations */\n\n/*\n *Initial Population\n */\n\ndefine &quot;Initial Population&quot;:\n  true\n\n/**\n * Numerator\n * \n * Definition: Number of people newly started on HBV treatment (TDF) during the reporting period  | plus | Number of people living with HIV who are already on TDF-based ART\n * Calculation: COUNT of clients with &quot;HIV status&quot;='HIV-positive' AND &quot;HBsAg test date&quot; in the reporting period AND &quot;HBsAg test result&quot;=' HBsAg positive' AND &quot;HBV treatment (TDF) start date&quot; in the reporting period | + | COUNT of clients with &quot;HIV status&quot;='HIV-positive' AND &quot;HBsAg test date&quot; in the reporting period AND &quot;HBsAg test result&quot;=' HBsAg positive' AND &quot;Currently on TDF-based ART&quot;\n */\n\ndefine &quot;Numerator&quot;:\n  HIE.&quot;Has HIV-positive Status&quot; and\n  exists(HE.&quot;Positive D.DE163&quot; G\n  with HE.&quot;HBsAg test date D.DE161&quot; P\n  such that G.partOf.references(P) and P.performed.toInterval() during &quot;Measurement Period&quot;) and\n  (exists(HE.&quot;HBV treatment TDF start date&quot; MS where start of MS.effective.toInterval() during &quot;Measurement Period&quot;) or\n  exists(HE.&quot;HBV treatment TDF start date&quot; MS where  MS.effective.toInterval() overlaps &quot;Measurement Period&quot;)\n  )\n\n\n\n/**\n * Denominator\n *\n * Definition: Number of people living with HIV who were diagnosed with HBV\n * Calculation: COUNT of clients with &quot;HIV status&quot;='HIV-positive' AND &quot;HBsAg test date&quot; in the reporting period AND &quot;HBsAg test result&quot;='HBsAg positive'\n */\n\ndefine &quot;Denominator&quot;:\n  HIE.&quot;Has HIV-positive Status&quot; and\n  exists(HE.&quot;Positive D.DE163&quot; G\n  with HE.&quot;HBsAg test date D.DE161&quot; P\n  such that G.partOf.references(P) and P.performed.toInterval() during &quot;Measurement Period&quot;)\n    \n\n/* end Populations */\n\n\n/*\n * Disaggregators\n */\n\ndefine &quot;Administrative Gender Stratifier&quot;:\n\tHIE.&quot;By Administrative Gender Stratifier&quot;\n\ndefine &quot;Age Stratifier&quot;:\n\tHIE.&quot;By Age Stratifier 2&quot;\n\ndefine &quot;Geographic Region Stratifier&quot;:\n\tHIE.&quot;By Geographic Region Stratifier&quot;\n\ndefine &quot;patientGroups Stratifier&quot;:\n\tHIE.&quot;patientGroups&quot;\n\n\ndefine &quot;Stratification&quot;:\n HIE.&quot;By Administrative Gender Stratifier&quot;.code \n  + ':' + HIE.&quot;By Age Stratifier 2&quot;\n+ ':' + HIE.&quot;By Geographic Region Stratifier&quot;\n+ Combine(HIE.patientGroups, ':')\n\n</code></pre><p><code>Content not shown - (</code><code>application/elm+xml</code>, size = 47Kb )</p></div>"
  },
  "extension" : [{
    "url" : "http://hl7.org/fhir/StructureDefinition/cqf-knowledgeCapability",
    "valueCode" : "computable"
  }],
  "url" : "http://smart.who.int/hiv/Library/HIVIND90Logic",
  "version" : "0.3.0",
  "name" : "HIVIND90Logic",
  "title" : "HIV.IND.90 Logic",
  "status" : "draft",
  "experimental" : true,
  "type" : {
    "coding" : [{
      "system" : "http://terminology.hl7.org/CodeSystem/library-type",
      "code" : "logic-library"
    }]
  },
  "date" : "2024-11-07T21:07:17+00:00",
  "publisher" : "WHO",
  "contact" : [{
    "name" : "WHO",
    "telecom" : [{
      "system" : "url",
      "value" : "http://who.int"
    }]
  }],
  "description" : "% of people living with HIV and diagnosed with HBV infection who are on TDF-based ART",
  "relatedArtifact" : [{
    "type" : "depends-on",
    "display" : "Library HIC",
    "resource" : "http://smart.who.int/hiv/Library/HIVCommon|0.0.1"
  },
  {
    "type" : "depends-on",
    "display" : "Library WCom",
    "resource" : "http://smart.who.int/hiv/Library/WHOCommon"
  },
  {
    "type" : "depends-on",
    "display" : "Library HE",
    "resource" : "http://smart.who.int/hiv/Library/HIVElements"
  },
  {
    "type" : "depends-on",
    "display" : "Library HIE",
    "resource" : "http://smart.who.int/hiv/Library/HIVIndicatorElements"
  },
  {
    "type" : "depends-on",
    "display" : "Library Config",
    "resource" : "http://smart.who.int/hiv/Library/HIVConfig"
  }],
  "parameter" : [{
    "name" : "Measurement Period",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "type" : "Period"
  },
  {
    "name" : "Patient",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "Patient"
  },
  {
    "name" : "Initial Population",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Numerator",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Denominator",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Administrative Gender Stratifier",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "Coding"
  },
  {
    "name" : "Age Stratifier",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "Geographic Region Stratifier",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "patientGroups Stratifier",
    "use" : "out",
    "min" : 0,
    "max" : "*",
    "type" : "string"
  },
  {
    "name" : "Stratification",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  }],
  "content" : [{
    "contentType" : "text/cql",
    "data" : ""
  },
  {
    "contentType" : "application/elm+xml",
    "data" : ""
  }]
}