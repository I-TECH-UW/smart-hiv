{
  "resourceType" : "Library",
  "id" : "HIVIND60Logic",
  "meta" : {
    "profile" : ["http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-shareablelibrary",
    "http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-publishablelibrary",
    "http://hl7.org/fhir/uv/cql/StructureDefinition/cql-library",
    "http://hl7.org/fhir/uv/cql/StructureDefinition/cql-module"]
  },
  "text" : {
    "status" : "generated",
    "div" : "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p class=\"res-header-id\"><b>Generated Narrative: Library HIVIND60Logic</b></p><a name=\"HIVIND60Logic\"> </a><a name=\"hcHIVIND60Logic\"> </a><a name=\"HIVIND60Logic-en-US\"> </a><h2>Related Artifacts</h2><table class=\"grid\"><tr><td>Depends On</td><td>Library HIC</td><td><code>http://smart.who.int/hiv/Library/HIVCommon|0.0.1</code></td></tr><tr><td>Depends On</td><td>Library WCom</td><td><a href=\"Library-WHOCommon.html\">WHOCommon</a></td></tr><tr><td>Depends On</td><td>Library HE</td><td><a href=\"Library-HIVElements.html\">HIVElements</a></td></tr><tr><td>Depends On</td><td>Library HIE</td><td><a href=\"Library-HIVIndicatorElements.html\">HIVIndicatorElements</a></td></tr><tr><td>Depends On</td><td>Library Config</td><td><a href=\"Library-HIVConfig.html\">HIVConfig</a></td></tr></table><h2>Parameters</h2><table class=\"grid\"><tr><td>Measurement Period</td><td>in</td><td>0</td><td>1</td><td>Period</td></tr><tr><td>Patient</td><td>out</td><td>0</td><td>1</td><td>Patient</td></tr><tr><td>Initial Population</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Numerator</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Denominator</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Age Stratifier</td><td>out</td><td>0</td><td>1</td><td>string</td></tr><tr><td>Geographic Region Stratifier</td><td>out</td><td>0</td><td>1</td><td>string</td></tr><tr><td>HIV Status</td><td>out</td><td>0</td><td>1</td><td>Coding</td></tr><tr><td>Stratification</td><td>out</td><td>0</td><td>1</td><td>string</td></tr></table><h2>Contents</h2><p><code>text/cql</code></p><pre><code class=\"language-sql\">/**\n * Library: HIV.IND.60 Logic\n * Ref No: STI.1C1\n * Short Name: Syphilis testing coverage, pregnant women, first ANC visit\n *\n * Definition: % of pregnant women who were tested for syphilis on first ANC services visit during the reporting period\n *\n * Numerator: Number of pregnant women tested for syphilis while attending their first ANC services visit\n * Numerator Calculation: COUNT of pregnant women with first &quot;ANC contact date&quot; for this pregnancy in reporting period AND &quot;Syphilis test date&quot; on first &quot;ANC contact date&quot;\n * Numerator Exclusions: \n *\n * Denominator: Number of pregnant women attending first ANC services visit\n * Denominator Calculation: COUNT of pregnant women with first &quot;ANC contact date&quot; in reporting period\n * Denominator Exclusions: \n *\n * Disaggregations:\n * • Age (15–19, 20–24, 25–29, 30–49, 50+ years) \n *  •\u00a0HIV status (HIV-positive, HIV-negative, unknown status) \n *  •\u00a0Cities and other administrative regions of epidemiologic importance\n *\n * Disaggregation Elements: Age | HIV status\n *\n * Numerator and Denominator Elements:\n * ANC contact date \n *  Syphilis test date\n *\n * Reference: Consolidated guidelines on person-centred HIV strategic information: strengthening routine data for impact. Geneva: World Health Organization; 2022\n * \n * Data Concepts:\n * HIV.A.DE17: Age | Calculated age (number of years) of the client based on date of birth\n * HIV.B.DE115: HIV status | HIV status reported after applying the national HIV testing algorithm. No single HIV test can provide an HIV-positive diagnosis.\n * HIV.B.DE116: HIV-positive | Client is HIV-positive\n * HIV.B.DE117: HIV-negative | Client is HIV-negative\n * HIV.B.DE118: Unknown | Client has unknown HIV status\n * HIV.B.DE249: Syphilis test date | Date of syphilis test\n * HIV.D.DE801: Syphilis test date | Date of syphilis test\n * HIV.E.DE85: ANC contact date | The date and time of the client's ANC contact (in the ANC DAK this is called 'Contact date')\n * HIV.G.DE69: Syphilis test date | Date of syphilis test\n * HIV.SRV.DE18: ANC contact date | The date and time of the client's ANC contact (in the ANC DAK this is called 'Contact date')\n *\n * Additional Context\n * - what it measures: A: % of people attending HIV prevention services who were tested for syphilis during the reporting period | B: % of people living with HIV who were tested for syphilis during the reporting period  | C: % of pregnant women who were tested for syphilis during the reporting period\n * - rationale: • Measuring the burden of syphilis among people living with HIV and among populations at elevated risk of HIV acquisition can help national planners determine the resources needed to address both diseases. | • Testing pregnant women for syphilis is important for their own health, and it is also the first step in the prevention of vertical transmission of syphilis. Knowing the testing coverage contributes to quality assessment across the full scope of antenatal care services. | • Testing for syphilis identifies individuals who would benefit from treatment. | •\u00a0Testing coverage measures progress towards scaling up screening/testing and can be used to assess whether national screening guidelines are being followed.\n * - method: Individual-level data obtained from programme records |  | If individual-level data are not available, the indicator can be reported using aggregate programme data. If aggregate data are used and it is not possible to exclude individuals who are tested more than once during the reporting period, the testing coverage estimates will be inflated. |  | Testing (screening) may be done using either a nontreponemal test (for example, venereal disease research laboratory [VDRL] or rapid plasma reagin [RPR]) or a treponemal test | (for example, Treponema pallidum haemagglutination assay [TPHA], Treponema pallidum particle agglutination assay [TPPA], enzyme immunoassay or rapid treponemal test). For this indicator, having either type of test (treponemal or nontreponemal) is sufficient, although being tested with both is preferred.\n * \n * Suggested Scoring Method: proportion | http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/proportion-measure-cqfm\n */\n\nlibrary HIVIND60Logic\n\n// Included Libraries\nusing FHIR version '4.0.1'\n\ninclude HIVCommon version '0.0.1' called HIC\ninclude FHIRHelpers version '4.0.1'\n\ninclude WHOCommon called WCom\ninclude HIVElements called HE\ninclude HIVIndicatorElements called HIE\ninclude HIVConfig called Config\n\n// Indicator Definition\nparameter &quot;Measurement Period&quot; Interval&lt;Date&gt; default Interval[@2023-01-01, @2023-01-30]\n\ncontext Patient\n/* Populations */\n\n\n\n\n\n\n/*\n *Initial Population\n */\n\ndefine &quot;Initial Population&quot;:\n  true\n\n/**\n * Numerator\n * \n * Definition: Number of pregnant women tested for syphilis while attending their first ANC services visit\n * Calculation: COUNT of pregnant women with first &quot;ANC contact date&quot; for this pregnancy in reporting period AND &quot;Syphilis test date&quot; on first &quot;ANC contact date&quot;\n */\n\ndefine &quot;Numerator&quot;:\n  First(HE.&quot;ANC contact date E.DE85&quot;) during &quot;Measurement Period&quot;\n  and exists(HE.&quot;Syphilis test date B.DE249&quot; P\n    where start of P.performed.toInterval() = start of First(HE.&quot;ANC contact date E.DE85&quot;))\n\n\n/**\n * Denominator\n *\n * Definition: Number of pregnant women attending first ANC services visit\n * Calculation: COUNT of pregnant women with first &quot;ANC contact date&quot; in reporting period\n */\n\ndefine &quot;Denominator&quot;:\n  First(HE.&quot;ANC contact date E.DE85&quot;) during &quot;Measurement Period&quot;\n    \n\n/* end Populations */\n\n/*\n * Disaggregators\n */\n\n\ndefine &quot;Age Stratifier&quot;:\n\tHIE.&quot;By Age Stratifier 2&quot;\n\ndefine &quot;Geographic Region Stratifier&quot;:\n\tHIE.&quot;By Geographic Region Stratifier&quot;\n\ndefine &quot;HIV Status&quot;:\n  HIE.&quot;HIV Status Stratifier&quot;\n\ndefine &quot;Stratification&quot;:\nHIE.&quot;By Age Stratifier 2&quot;\n+ ':' + HIE.&quot;By Geographic Region Stratifier&quot;\n+ ':' + HIE.&quot;HIV Status Stratifier&quot;.code </code></pre><p><code>Content not shown - (</code><code>application/elm+xml</code>, size = 26Kb )</p></div>"
  },
  "extension" : [{
    "url" : "http://hl7.org/fhir/StructureDefinition/cqf-knowledgeCapability",
    "valueCode" : "computable"
  }],
  "url" : "http://smart.who.int/hiv/Library/HIVIND60Logic",
  "version" : "0.3.0",
  "name" : "HIVIND60Logic",
  "title" : "HIV.IND.60 Logic",
  "status" : "draft",
  "experimental" : true,
  "type" : {
    "coding" : [{
      "system" : "http://terminology.hl7.org/CodeSystem/library-type",
      "code" : "logic-library"
    }]
  },
  "date" : "2024-08-18T19:05:30+00:00",
  "publisher" : "WHO",
  "contact" : [{
    "name" : "WHO",
    "telecom" : [{
      "system" : "url",
      "value" : "http://who.int"
    }]
  }],
  "description" : "% of pregnant women who were tested for syphilis on first ANC services visit during the reporting period",
  "relatedArtifact" : [{
    "type" : "depends-on",
    "display" : "Library HIC",
    "resource" : "http://smart.who.int/hiv/Library/HIVCommon|0.0.1"
  },
  {
    "type" : "depends-on",
    "display" : "Library WCom",
    "resource" : "http://smart.who.int/hiv/Library/WHOCommon"
  },
  {
    "type" : "depends-on",
    "display" : "Library HE",
    "resource" : "http://smart.who.int/hiv/Library/HIVElements"
  },
  {
    "type" : "depends-on",
    "display" : "Library HIE",
    "resource" : "http://smart.who.int/hiv/Library/HIVIndicatorElements"
  },
  {
    "type" : "depends-on",
    "display" : "Library Config",
    "resource" : "http://smart.who.int/hiv/Library/HIVConfig"
  }],
  "parameter" : [{
    "name" : "Measurement Period",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "type" : "Period"
  },
  {
    "name" : "Patient",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "Patient"
  },
  {
    "name" : "Initial Population",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Numerator",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Denominator",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "boolean"
  },
  {
    "name" : "Age Stratifier",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "Geographic Region Stratifier",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  },
  {
    "name" : "HIV Status",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "Coding"
  },
  {
    "name" : "Stratification",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "type" : "string"
  }],
  "content" : [{
    "contentType" : "text/cql",
    "data" : "LyoqCiAqIExpYnJhcnk6IEhJVi5JTkQuNjAgTG9naWMKICogUmVmIE5vOiBTVEkuMUMxCiAqIFNob3J0IE5hbWU6IFN5cGhpbGlzIHRlc3RpbmcgY292ZXJhZ2UsIHByZWduYW50IHdvbWVuLCBmaXJzdCBBTkMgdmlzaXQKICoKICogRGVmaW5pdGlvbjogJSBvZiBwcmVnbmFudCB3b21lbiB3aG8gd2VyZSB0ZXN0ZWQgZm9yIHN5cGhpbGlzIG9uIGZpcnN0IEFOQyBzZXJ2aWNlcyB2aXNpdCBkdXJpbmcgdGhlIHJlcG9ydGluZyBwZXJpb2QKICoKICogTnVtZXJhdG9yOiBOdW1iZXIgb2YgcHJlZ25hbnQgd29tZW4gdGVzdGVkIGZvciBzeXBoaWxpcyB3aGlsZSBhdHRlbmRpbmcgdGhlaXIgZmlyc3QgQU5DIHNlcnZpY2VzIHZpc2l0CiAqIE51bWVyYXRvciBDYWxjdWxhdGlvbjogQ09VTlQgb2YgcHJlZ25hbnQgd29tZW4gd2l0aCBmaXJzdCAiQU5DIGNvbnRhY3QgZGF0ZSIgZm9yIHRoaXMgcHJlZ25hbmN5IGluIHJlcG9ydGluZyBwZXJpb2QgQU5EICJTeXBoaWxpcyB0ZXN0IGRhdGUiIG9uIGZpcnN0ICJBTkMgY29udGFjdCBkYXRlIgogKiBOdW1lcmF0b3IgRXhjbHVzaW9uczogCiAqCiAqIERlbm9taW5hdG9yOiBOdW1iZXIgb2YgcHJlZ25hbnQgd29tZW4gYXR0ZW5kaW5nIGZpcnN0IEFOQyBzZXJ2aWNlcyB2aXNpdAogKiBEZW5vbWluYXRvciBDYWxjdWxhdGlvbjogQ09VTlQgb2YgcHJlZ25hbnQgd29tZW4gd2l0aCBmaXJzdCAiQU5DIGNvbnRhY3QgZGF0ZSIgaW4gcmVwb3J0aW5nIHBlcmlvZAogKiBEZW5vbWluYXRvciBFeGNsdXNpb25zOiAKICoKICogRGlzYWdncmVnYXRpb25zOgogKiDigKIgQWdlICgxNeKAkzE5LCAyMOKAkzI0LCAyNeKAkzI5LCAzMOKAkzQ5LCA1MCsgeWVhcnMpIAogKiAg4oCiwqBISVYgc3RhdHVzIChISVYtcG9zaXRpdmUsIEhJVi1uZWdhdGl2ZSwgdW5rbm93biBzdGF0dXMpIAogKiAg4oCiwqBDaXRpZXMgYW5kIG90aGVyIGFkbWluaXN0cmF0aXZlIHJlZ2lvbnMgb2YgZXBpZGVtaW9sb2dpYyBpbXBvcnRhbmNlCiAqCiAqIERpc2FnZ3JlZ2F0aW9uIEVsZW1lbnRzOiBBZ2UgfCBISVYgc3RhdHVzCiAqCiAqIE51bWVyYXRvciBhbmQgRGVub21pbmF0b3IgRWxlbWVudHM6CiAqIEFOQyBjb250YWN0IGRhdGUgCiAqICBTeXBoaWxpcyB0ZXN0IGRhdGUKICoKICogUmVmZXJlbmNlOiBDb25zb2xpZGF0ZWQgZ3VpZGVsaW5lcyBvbiBwZXJzb24tY2VudHJlZCBISVYgc3RyYXRlZ2ljIGluZm9ybWF0aW9uOiBzdHJlbmd0aGVuaW5nIHJvdXRpbmUgZGF0YSBmb3IgaW1wYWN0LiBHZW5ldmE6IFdvcmxkIEhlYWx0aCBPcmdhbml6YXRpb247IDIwMjIKICogCiAqIERhdGEgQ29uY2VwdHM6CiAqIEhJVi5BLkRFMTc6IEFnZSB8IENhbGN1bGF0ZWQgYWdlIChudW1iZXIgb2YgeWVhcnMpIG9mIHRoZSBjbGllbnQgYmFzZWQgb24gZGF0ZSBvZiBiaXJ0aAogKiBISVYuQi5ERTExNTogSElWIHN0YXR1cyB8IEhJViBzdGF0dXMgcmVwb3J0ZWQgYWZ0ZXIgYXBwbHlpbmcgdGhlIG5hdGlvbmFsIEhJViB0ZXN0aW5nIGFsZ29yaXRobS4gTm8gc2luZ2xlIEhJViB0ZXN0IGNhbiBwcm92aWRlIGFuIEhJVi1wb3NpdGl2ZSBkaWFnbm9zaXMuCiAqIEhJVi5CLkRFMTE2OiBISVYtcG9zaXRpdmUgfCBDbGllbnQgaXMgSElWLXBvc2l0aXZlCiAqIEhJVi5CLkRFMTE3OiBISVYtbmVnYXRpdmUgfCBDbGllbnQgaXMgSElWLW5lZ2F0aXZlCiAqIEhJVi5CLkRFMTE4OiBVbmtub3duIHwgQ2xpZW50IGhhcyB1bmtub3duIEhJViBzdGF0dXMKICogSElWLkIuREUyNDk6IFN5cGhpbGlzIHRlc3QgZGF0ZSB8IERhdGUgb2Ygc3lwaGlsaXMgdGVzdAogKiBISVYuRC5ERTgwMTogU3lwaGlsaXMgdGVzdCBkYXRlIHwgRGF0ZSBvZiBzeXBoaWxpcyB0ZXN0CiAqIEhJVi5FLkRFODU6IEFOQyBjb250YWN0IGRhdGUgfCBUaGUgZGF0ZSBhbmQgdGltZSBvZiB0aGUgY2xpZW50J3MgQU5DIGNvbnRhY3QgKGluIHRoZSBBTkMgREFLIHRoaXMgaXMgY2FsbGVkICdDb250YWN0IGRhdGUnKQogKiBISVYuRy5ERTY5OiBTeXBoaWxpcyB0ZXN0IGRhdGUgfCBEYXRlIG9mIHN5cGhpbGlzIHRlc3QKICogSElWLlNSVi5ERTE4OiBBTkMgY29udGFjdCBkYXRlIHwgVGhlIGRhdGUgYW5kIHRpbWUgb2YgdGhlIGNsaWVudCdzIEFOQyBjb250YWN0IChpbiB0aGUgQU5DIERBSyB0aGlzIGlzIGNhbGxlZCAnQ29udGFjdCBkYXRlJykKICoKICogQWRkaXRpb25hbCBDb250ZXh0CiAqIC0gd2hhdCBpdCBtZWFzdXJlczogQTogJSBvZiBwZW9wbGUgYXR0ZW5kaW5nIEhJViBwcmV2ZW50aW9uIHNlcnZpY2VzIHdobyB3ZXJlIHRlc3RlZCBmb3Igc3lwaGlsaXMgZHVyaW5nIHRoZSByZXBvcnRpbmcgcGVyaW9kIHwgQjogJSBvZiBwZW9wbGUgbGl2aW5nIHdpdGggSElWIHdobyB3ZXJlIHRlc3RlZCBmb3Igc3lwaGlsaXMgZHVyaW5nIHRoZSByZXBvcnRpbmcgcGVyaW9kICB8IEM6ICUgb2YgcHJlZ25hbnQgd29tZW4gd2hvIHdlcmUgdGVzdGVkIGZvciBzeXBoaWxpcyBkdXJpbmcgdGhlIHJlcG9ydGluZyBwZXJpb2QKICogLSByYXRpb25hbGU6IOKAoiBNZWFzdXJpbmcgdGhlIGJ1cmRlbiBvZiBzeXBoaWxpcyBhbW9uZyBwZW9wbGUgbGl2aW5nIHdpdGggSElWIGFuZCBhbW9uZyBwb3B1bGF0aW9ucyBhdCBlbGV2YXRlZCByaXNrIG9mIEhJViBhY3F1aXNpdGlvbiBjYW4gaGVscCBuYXRpb25hbCBwbGFubmVycyBkZXRlcm1pbmUgdGhlIHJlc291cmNlcyBuZWVkZWQgdG8gYWRkcmVzcyBib3RoIGRpc2Vhc2VzLiB8IOKAoiBUZXN0aW5nIHByZWduYW50IHdvbWVuIGZvciBzeXBoaWxpcyBpcyBpbXBvcnRhbnQgZm9yIHRoZWlyIG93biBoZWFsdGgsIGFuZCBpdCBpcyBhbHNvIHRoZSBmaXJzdCBzdGVwIGluIHRoZSBwcmV2ZW50aW9uIG9mIHZlcnRpY2FsIHRyYW5zbWlzc2lvbiBvZiBzeXBoaWxpcy4gS25vd2luZyB0aGUgdGVzdGluZyBjb3ZlcmFnZSBjb250cmlidXRlcyB0byBxdWFsaXR5IGFzc2Vzc21lbnQgYWNyb3NzIHRoZSBmdWxsIHNjb3BlIG9mIGFudGVuYXRhbCBjYXJlIHNlcnZpY2VzLiB8IOKAoiBUZXN0aW5nIGZvciBzeXBoaWxpcyBpZGVudGlmaWVzIGluZGl2aWR1YWxzIHdobyB3b3VsZCBiZW5lZml0IGZyb20gdHJlYXRtZW50LiB8IOKAosKgVGVzdGluZyBjb3ZlcmFnZSBtZWFzdXJlcyBwcm9ncmVzcyB0b3dhcmRzIHNjYWxpbmcgdXAgc2NyZWVuaW5nL3Rlc3RpbmcgYW5kIGNhbiBiZSB1c2VkIHRvIGFzc2VzcyB3aGV0aGVyIG5hdGlvbmFsIHNjcmVlbmluZyBndWlkZWxpbmVzIGFyZSBiZWluZyBmb2xsb3dlZC4KICogLSBtZXRob2Q6IEluZGl2aWR1YWwtbGV2ZWwgZGF0YSBvYnRhaW5lZCBmcm9tIHByb2dyYW1tZSByZWNvcmRzIHwgIHwgSWYgaW5kaXZpZHVhbC1sZXZlbCBkYXRhIGFyZSBub3QgYXZhaWxhYmxlLCB0aGUgaW5kaWNhdG9yIGNhbiBiZSByZXBvcnRlZCB1c2luZyBhZ2dyZWdhdGUgcHJvZ3JhbW1lIGRhdGEuIElmIGFnZ3JlZ2F0ZSBkYXRhIGFyZSB1c2VkIGFuZCBpdCBpcyBub3QgcG9zc2libGUgdG8gZXhjbHVkZSBpbmRpdmlkdWFscyB3aG8gYXJlIHRlc3RlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIHJlcG9ydGluZyBwZXJpb2QsIHRoZSB0ZXN0aW5nIGNvdmVyYWdlIGVzdGltYXRlcyB3aWxsIGJlIGluZmxhdGVkLiB8ICB8IFRlc3RpbmcgKHNjcmVlbmluZykgbWF5IGJlIGRvbmUgdXNpbmcgZWl0aGVyIGEgbm9udHJlcG9uZW1hbCB0ZXN0IChmb3IgZXhhbXBsZSwgdmVuZXJlYWwgZGlzZWFzZSByZXNlYXJjaCBsYWJvcmF0b3J5IFtWRFJMXSBvciByYXBpZCBwbGFzbWEgcmVhZ2luIFtSUFJdKSBvciBhIHRyZXBvbmVtYWwgdGVzdCB8IChmb3IgZXhhbXBsZSwgVHJlcG9uZW1hIHBhbGxpZHVtIGhhZW1hZ2dsdXRpbmF0aW9uIGFzc2F5IFtUUEhBXSwgVHJlcG9uZW1hIHBhbGxpZHVtIHBhcnRpY2xlIGFnZ2x1dGluYXRpb24gYXNzYXkgW1RQUEFdLCBlbnp5bWUgaW1tdW5vYXNzYXkgb3IgcmFwaWQgdHJlcG9uZW1hbCB0ZXN0KS4gRm9yIHRoaXMgaW5kaWNhdG9yLCBoYXZpbmcgZWl0aGVyIHR5cGUgb2YgdGVzdCAodHJlcG9uZW1hbCBvciBub250cmVwb25lbWFsKSBpcyBzdWZmaWNpZW50LCBhbHRob3VnaCBiZWluZyB0ZXN0ZWQgd2l0aCBib3RoIGlzIHByZWZlcnJlZC4KICogCiAqIFN1Z2dlc3RlZCBTY29yaW5nIE1ldGhvZDogcHJvcG9ydGlvbiB8IGh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvY3FmbWVhc3VyZXMvU3RydWN0dXJlRGVmaW5pdGlvbi9wcm9wb3J0aW9uLW1lYXN1cmUtY3FmbQogKi8KCmxpYnJhcnkgSElWSU5ENjBMb2dpYwoKLy8gSW5jbHVkZWQgTGlicmFyaWVzCnVzaW5nIEZISVIgdmVyc2lvbiAnNC4wLjEnCgppbmNsdWRlIEhJVkNvbW1vbiB2ZXJzaW9uICcwLjAuMScgY2FsbGVkIEhJQwppbmNsdWRlIEZISVJIZWxwZXJzIHZlcnNpb24gJzQuMC4xJwoKaW5jbHVkZSBXSE9Db21tb24gY2FsbGVkIFdDb20KaW5jbHVkZSBISVZFbGVtZW50cyBjYWxsZWQgSEUKaW5jbHVkZSBISVZJbmRpY2F0b3JFbGVtZW50cyBjYWxsZWQgSElFCmluY2x1ZGUgSElWQ29uZmlnIGNhbGxlZCBDb25maWcKCi8vIEluZGljYXRvciBEZWZpbml0aW9uCnBhcmFtZXRlciAiTWVhc3VyZW1lbnQgUGVyaW9kIiBJbnRlcnZhbDxEYXRlPiBkZWZhdWx0IEludGVydmFsW0AyMDIzLTAxLTAxLCBAMjAyMy0wMS0zMF0KCmNvbnRleHQgUGF0aWVudAovKiBQb3B1bGF0aW9ucyAqLwoKCgoKCgovKgogKkluaXRpYWwgUG9wdWxhdGlvbgogKi8KCmRlZmluZSAiSW5pdGlhbCBQb3B1bGF0aW9uIjoKICB0cnVlCgovKioKICogTnVtZXJhdG9yCiAqIAogKiBEZWZpbml0aW9uOiBOdW1iZXIgb2YgcHJlZ25hbnQgd29tZW4gdGVzdGVkIGZvciBzeXBoaWxpcyB3aGlsZSBhdHRlbmRpbmcgdGhlaXIgZmlyc3QgQU5DIHNlcnZpY2VzIHZpc2l0CiAqIENhbGN1bGF0aW9uOiBDT1VOVCBvZiBwcmVnbmFudCB3b21lbiB3aXRoIGZpcnN0ICJBTkMgY29udGFjdCBkYXRlIiBmb3IgdGhpcyBwcmVnbmFuY3kgaW4gcmVwb3J0aW5nIHBlcmlvZCBBTkQgIlN5cGhpbGlzIHRlc3QgZGF0ZSIgb24gZmlyc3QgIkFOQyBjb250YWN0IGRhdGUiCiAqLwoKZGVmaW5lICJOdW1lcmF0b3IiOgogIEZpcnN0KEhFLiJBTkMgY29udGFjdCBkYXRlIEUuREU4NSIpIGR1cmluZyAiTWVhc3VyZW1lbnQgUGVyaW9kIgogIGFuZCBleGlzdHMoSEUuIlN5cGhpbGlzIHRlc3QgZGF0ZSBCLkRFMjQ5IiBQCiAgICB3aGVyZSBzdGFydCBvZiBQLnBlcmZvcm1lZC50b0ludGVydmFsKCkgPSBzdGFydCBvZiBGaXJzdChIRS4iQU5DIGNvbnRhY3QgZGF0ZSBFLkRFODUiKSkKCgovKioKICogRGVub21pbmF0b3IKICoKICogRGVmaW5pdGlvbjogTnVtYmVyIG9mIHByZWduYW50IHdvbWVuIGF0dGVuZGluZyBmaXJzdCBBTkMgc2VydmljZXMgdmlzaXQKICogQ2FsY3VsYXRpb246IENPVU5UIG9mIHByZWduYW50IHdvbWVuIHdpdGggZmlyc3QgIkFOQyBjb250YWN0IGRhdGUiIGluIHJlcG9ydGluZyBwZXJpb2QKICovCgpkZWZpbmUgIkRlbm9taW5hdG9yIjoKICBGaXJzdChIRS4iQU5DIGNvbnRhY3QgZGF0ZSBFLkRFODUiKSBkdXJpbmcgIk1lYXN1cmVtZW50IFBlcmlvZCIKICAgIAoKLyogZW5kIFBvcHVsYXRpb25zICovCgovKgogKiBEaXNhZ2dyZWdhdG9ycwogKi8KCgpkZWZpbmUgIkFnZSBTdHJhdGlmaWVyIjoKCUhJRS4iQnkgQWdlIFN0cmF0aWZpZXIgMiIKCmRlZmluZSAiR2VvZ3JhcGhpYyBSZWdpb24gU3RyYXRpZmllciI6CglISUUuIkJ5IEdlb2dyYXBoaWMgUmVnaW9uIFN0cmF0aWZpZXIiCgpkZWZpbmUgIkhJViBTdGF0dXMiOgogIEhJRS4iSElWIFN0YXR1cyBTdHJhdGlmaWVyIgoKZGVmaW5lICJTdHJhdGlmaWNhdGlvbiI6CkhJRS4iQnkgQWdlIFN0cmF0aWZpZXIgMiIKKyAnOicgKyBISUUuIkJ5IEdlb2dyYXBoaWMgUmVnaW9uIFN0cmF0aWZpZXIiCisgJzonICsgSElFLiJISVYgU3RhdHVzIFN0cmF0aWZpZXIiLmNvZGUg"
  },
  {
    "contentType" : "application/elm+xml",
    "data" : ""
  }]
}