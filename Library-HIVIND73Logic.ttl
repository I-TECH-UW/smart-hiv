@prefix fhir: <http://hl7.org/fhir/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# - resource -------------------------------------------------------------------

<http://smart.who.int/hiv/Library/HIVIND73Logic> a fhir:Library ;
  fhir:nodeRole fhir:treeRoot ;
  fhir:id [ fhir:v "HIVIND73Logic"] ; # 
  fhir:meta [
     fhir:profile ( [
       fhir:v "http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-shareablelibrary"^^xsd:anyURI ;
       fhir:link <http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-shareablelibrary>
     ] [
       fhir:v "http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-publishablelibrary"^^xsd:anyURI ;
       fhir:link <http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-publishablelibrary>
     ] [
       fhir:v "http://hl7.org/fhir/uv/cql/StructureDefinition/cql-library"^^xsd:anyURI ;
       fhir:link <http://hl7.org/fhir/uv/cql/StructureDefinition/cql-library>
     ] [
       fhir:v "http://hl7.org/fhir/uv/cql/StructureDefinition/cql-module"^^xsd:anyURI ;
       fhir:link <http://hl7.org/fhir/uv/cql/StructureDefinition/cql-module>
     ] )
  ] ; # 
  fhir:text [
     fhir:status [ fhir:v "generated" ] ;
     fhir:div "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p class=\"res-header-id\"><b>Generated Narrative: Library HIVIND73Logic</b></p><a name=\"HIVIND73Logic\"> </a><a name=\"hcHIVIND73Logic\"> </a><a name=\"HIVIND73Logic-en-US\"> </a><h2>Related Artifacts</h2><table class=\"grid\"><tr><td>Depends On</td><td>Library HIC</td><td><code>http://smart.who.int/hiv/Library/HIVCommon|0.0.1</code></td></tr><tr><td>Depends On</td><td>Library WCom</td><td><code>http://smart.who.int/hiv/Library/WHOCommon</code></td></tr></table><h2>Parameters</h2><table class=\"grid\"><tr><td>Measurement Period</td><td>in</td><td>0</td><td>1</td><td>Period</td></tr><tr><td>Patient</td><td>out</td><td>0</td><td>1</td><td>Patient</td></tr><tr><td>Initial Population</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Numerator</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr><tr><td>Denominator</td><td>out</td><td>0</td><td>1</td><td>boolean</td></tr></table><h2>Contents</h2><p><code>text/cql</code></p><pre><code class=\"language-sql\">/**\n * Library: HIV.IND.73 Logic\n * Ref No: STI.5B\n * Short Name: Gonorrhoea test positivity, HIV-positive clients\n *\n * Definition: % of people living with HIV who tested positive for gonorrhoea during the reporting period\n *\n * Numerator: Number of people living with HIV who tested positive for gonorrhoea during the reporting period\n * Numerator Calculation: COUNT of clients with &quot;HIV status&quot;='HIV-positive' AND &quot;Gonorrhoea test date&quot; in the reporting period AND &quot;Gonorrhoea test result&quot;='Positive'\n * Numerator Exclusions: \n *\n * Denominator: Number of people living with HIV tested for gonorrhoea (using a molecular test, culture or POC test) while attending HIV care and treatment services during the reporting period\n * Denominator Calculation: COUNT of clients with &quot;HIV status&quot;='HIV-positive' AND &quot;Gonorrhoea test date&quot; in the reporting period\n * Denominator Exclusions: \n *\n * Disaggregations:\n * • Gender (male, female, other*) \n *  • Age (15–19, 20–24, 25–29, 30–49, 50+ years) \n *  • Key populations (men who have sex with men, people living in prisons and other closed settings, people who inject drugs, sex workers, trans and gender diverse people)** \n *  • Diagnostic test used and anatomic site sampled \n *  • Cities and other administrative regions of epidemiologic importance\n *\n * Disaggregation Elements: Gender | Age | Key population member type | Type of specimen | Neisseria gonorrhoeae test type\n *\n * Numerator and Denominator Elements:\n * Gonorrhoea test date \n *  Gonorrhoea test result \n *  HIV status\n *\n * Reference: Consolidated guidelines on person-centred HIV strategic information: strengthening routine data for impact. Geneva: World Health Organization; 2022\n * \n * Data Concepts:\n * HIV.A.DE17: Age | Calculated age (number of years) of the client based on date of birth\n * HIV.A.DE18: Gender* | Gender of the client*\n * HIV.A.DE19: Female | Client identifies as female\n * HIV.A.DE20: Male | Client identifies as male\n * HIV.A.DE21: Transgender male | Client identifies as transgender male\n * HIV.A.DE22: Transgender female | Client identifies as transgender female\n * HIV.A.DE23: Other | Additional category\n * HIV.B.DE50: Key population member type* | The type of key population that the client is included in\n * HIV.B.DE51: Sex worker | Client is a sex worker\n * HIV.B.DE52: Men who have sex with men | Client is a man who has sex with men\n * HIV.B.DE53: Trans and gender-diverse people | Client identifies as trans and gender-diverse\n * HIV.B.DE54: People who inject drugs | Client is a person who injects drugs\n * HIV.B.DE55: People living in prisons and other closed settings | Client lives in a prison or another closed setting\n * HIV.B.DE115: HIV status | HIV status reported after applying the national HIV testing algorithm. No single HIV test can provide an HIV-positive diagnosis.\n * HIV.B.DE116: HIV-positive | Client is HIV-positive\n * HIV.B.DE117: HIV-negative | Client is HIV-negative\n * HIV.B.DE118: Unknown | Client has unknown HIV status\n * HIV.B.DE255: Gonorrhoea test date | Date of Gonorrhoea test\n * HIV.B.DE256: Gonorrhoea test result | Result from Gonorrhoea test\n * HIV.B.DE257: Positive | Test result is positive for Neisseria gonorrhoeae\n * HIV.B.DE258: Negative | Test result is negative for Neisseria gonorrhoeae\n * HIV.B.DE259: Inconclusive | Test result is inconclusive\n * HIV.B.DE261: Type of specimen | Type of specimen to be collected\n * HIV.B.DE262: Blood | Blood specimen to be collected\n * HIV.B.DE263: Urine | Urine specimen to be collected\n * HIV.B.DE264: Cervical or vaginal swab | Cervical or vaginal swab to be collected\n * HIV.B.DE265: Urethral or penile swab | Urethral or penile swab to be collected\n * HIV.B.DE266: Rectal swab | Rectal swab to be collected\n * HIV.B.DE267: Other | Other specimen type to be collected\n * HIV.B.DE276: Neisseria gonorrhoeae test type | Type of diagnostic test used for Neisseria gonorrhoeae\n * HIV.B.DE277: NAAT | Nucleic Acid Amplification Test (NAAT) used\n * HIV.B.DE278: POC Test | Point-of-care (POC) test used\n * HIV.B.DE279: Culture | Culture test used\n * HIV.B.DE280: Microscopy | Microscopy test used\n * HIV.B.DE281: Other | Other type of test used\n * HIV.D.DE807: Gonorrhoea test date | Date of Gonorrhoea test\n * HIV.D.DE808: Gonorrhoea test result | Result from Gonorrhoea test\n * HIV.D.DE809: Positive | Test result is positive for Neisseria gonorrhoeae\n * HIV.D.DE810: Negative | Test result is negative for Neisseria gonorrhoeae\n * HIV.D.DE811: Inconclusive | Test result is inconclusive\n * HIV.D.DE813: Type of specimen | Type of specimen to be collected\n * HIV.D.DE814: Blood | Blood specimen to be collected\n * HIV.D.DE815: Urine | Urine specimen to be collected\n * HIV.D.DE816: Cervical or vaginal swab | Cervical or vaginal swab to be collected\n * HIV.D.DE817: Urethral or penile swab | Urethral or penile swab to be collected\n * HIV.D.DE818: Rectal swab | Rectal swab to be collected\n * HIV.D.DE819: Other | Other specimen type to be collected\n * HIV.D.DE828: Neisseria gonorrhoeae test type | Type of diagnostic test used for Neisseria gonorrhoeae\n * HIV.D.DE829: NAAT | Nucleic Acid Amplification Test (NAAT) used\n * HIV.D.DE830: POC Test | Point-of-care (POC) test used\n * HIV.D.DE831: Culture | Culture test used\n * HIV.D.DE832: Microscopy | Microscopy test used\n * HIV.D.DE833: Other | Other type of test used\n * HIV.E.DE114: Key population member type* | The type of key population that the infant's mother is included in\n * HIV.E.DE115: Sex worker | Infant's mother is a sex worker\n * HIV.E.DE116: People who inject drugs | Infant's mother is a person who injects drugs\n * HIV.E.DE117: Trans and gender-diverse people | Infant's mother identifies as trans and gender-diverse\n * HIV.E.DE118: People living in prisons and other closed setting | Infant's mother is in a prison or closed setting\n *\n * Additional Context\n * - what it measures: A: % of people attending HIV prevention services who were tested for gonorrhoea and | had a positive test result during the reporting period | B: % of people living with HIV who were tested for gonorrhoea and had a positive test result during the reporting period\n * - rationale: • Gonorrhoea test positivity can be used to highlight areas within a country that require additional support and provide early warning of potential changes in HIV and sexually transmitted infection transmission in the general population. | • Gonorrhoea test positivity is important information for generating national, regional and global incidence and prevalence estimates for gonorrhoea. | • Data on gonorrhoea test positivity are important for understanding the challenges imposed by increasing resistance to currently recommended treatment options.\n * - method: Individual-level data obtained from programme records.   |  | If individual-level data are not available, the indicator can be reported using aggregate programme data.\n * \n * Suggested Scoring Method: proportion | http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/proportion-measure-cqfm\n */\n\nlibrary HIVIND73Logic\n\n// Included Libraries\nusing FHIR version '4.0.1'\n\ninclude HIVCommon version '0.0.1' called HIC\ninclude FHIRHelpers version '4.0.1'\n\ninclude WHOCommon called WCom\n\n// Indicator Definition\nparameter &quot;Measurement Period&quot; Interval&lt;Date&gt; default Interval[@2023-01-01, @2023-01-30]\n\ncontext Patient\n/* Populations */\n\n/*\n *Initial Population\n */\n\ndefine &quot;Initial Population&quot;:\n  true\n\n/**\n * Numerator\n * \n * Definition: Number of people living with HIV who tested positive for gonorrhoea during the reporting period\n * Calculation: COUNT of clients with &quot;HIV status&quot;='HIV-positive' AND &quot;Gonorrhoea test date&quot; in the reporting period AND &quot;Gonorrhoea test result&quot;='Positive'\n */\n\ndefine &quot;Numerator&quot;:\n  true\n\n\n/**\n * Denominator\n *\n * Definition: Number of people living with HIV tested for gonorrhoea (using a molecular test, culture or POC test) while attending HIV care and treatment services during the reporting period\n * Calculation: COUNT of clients with &quot;HIV status&quot;='HIV-positive' AND &quot;Gonorrhoea test date&quot; in the reporting period\n */\n\ndefine &quot;Denominator&quot;:\n  true\n    \n\n/* end Populations */\n\n</code></pre><p><code>Content not shown - (</code><code>application/elm+xml</code>, size = 14Kb )</p></div>"
  ] ; # 
  fhir:extension ( [
     fhir:url [ fhir:v "http://hl7.org/fhir/StructureDefinition/cqf-knowledgeCapability"^^xsd:anyURI ] ;
     fhir:value [ fhir:v "computable" ]
  ] ) ; # 
  fhir:url [ fhir:v "http://smart.who.int/hiv/Library/HIVIND73Logic"^^xsd:anyURI] ; # 
  fhir:version [ fhir:v "0.2.0"] ; # 
  fhir:name [ fhir:v "HIVIND73Logic"] ; # 
  fhir:title [ fhir:v "HIV.IND.73 Logic"] ; # 
  fhir:status [ fhir:v "draft"] ; # 
  fhir:experimental [ fhir:v "true"^^xsd:boolean] ; # 
  fhir:type [
     fhir:coding ( [
       fhir:system [ fhir:v "http://terminology.hl7.org/CodeSystem/library-type"^^xsd:anyURI ] ;
       fhir:code [ fhir:v "logic-library" ]
     ] )
  ] ; # 
  fhir:date [ fhir:v "2024-08-09T22:35:04+00:00"^^xsd:dateTime] ; # 
  fhir:publisher [ fhir:v "WHO"] ; # 
  fhir:contact ( [
     fhir:name [ fhir:v "WHO" ] ;
     fhir:telecom ( [
       fhir:system [ fhir:v "url" ] ;
       fhir:value [ fhir:v "http://who.int" ]
     ] )
  ] ) ; # 
  fhir:description [ fhir:v "% of people living with HIV who tested positive for gonorrhoea during the reporting period"] ; # 
  fhir:relatedArtifact ( [
     fhir:type [ fhir:v "depends-on" ] ;
     fhir:display [ fhir:v "Library HIC" ] ;
     fhir:resource [
       fhir:v "http://smart.who.int/hiv/Library/HIVCommon|0.0.1"^^xsd:anyURI ;
       fhir:link <http://smart.who.int/hiv/Library/HIVCommon|0.0.1>
     ]
  ] [
     fhir:type [ fhir:v "depends-on" ] ;
     fhir:display [ fhir:v "Library WCom" ] ;
     fhir:resource [
       fhir:v "http://smart.who.int/hiv/Library/WHOCommon"^^xsd:anyURI ;
       fhir:link <http://smart.who.int/hiv/Library/WHOCommon>
     ]
  ] ) ; # 
  fhir:parameter ( [
     fhir:name [ fhir:v "Measurement Period" ] ;
     fhir:use [ fhir:v "in" ] ;
     fhir:min [ fhir:v "0"^^xsd:integer ] ;
     fhir:max [ fhir:v "1" ] ;
     fhir:type [ fhir:v "Period" ]
  ] [
     fhir:name [ fhir:v "Patient" ] ;
     fhir:use [ fhir:v "out" ] ;
     fhir:min [ fhir:v "0"^^xsd:integer ] ;
     fhir:max [ fhir:v "1" ] ;
     fhir:type [ fhir:v "Patient" ]
  ] [
     fhir:name [ fhir:v "Initial Population" ] ;
     fhir:use [ fhir:v "out" ] ;
     fhir:min [ fhir:v "0"^^xsd:integer ] ;
     fhir:max [ fhir:v "1" ] ;
     fhir:type [ fhir:v "boolean" ]
  ] [
     fhir:name [ fhir:v "Numerator" ] ;
     fhir:use [ fhir:v "out" ] ;
     fhir:min [ fhir:v "0"^^xsd:integer ] ;
     fhir:max [ fhir:v "1" ] ;
     fhir:type [ fhir:v "boolean" ]
  ] [
     fhir:name [ fhir:v "Denominator" ] ;
     fhir:use [ fhir:v "out" ] ;
     fhir:min [ fhir:v "0"^^xsd:integer ] ;
     fhir:max [ fhir:v "1" ] ;
     fhir:type [ fhir:v "boolean" ]
  ] ) ; # 
  fhir:content ( [
     fhir:contentType [ fhir:v "text/cql" ] ;
     fhir:data [ fhir:v ""^^xsd:base64Binary ]
  ] [
     fhir:contentType [ fhir:v "application/elm+xml" ] ;
     fhir:data [ fhir:v ""^^xsd:base64Binary ]
  ] ) . # 

# -------------------------------------------------------------------------------------

